From 580e52571ed8c15070e3c7061ce1baee5790c57f Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Thu, 6 Oct 2016 02:45:56 -0400
Subject: [PATCH] Identifiables


diff --git a/src/main/java/org/bukkit/ConnectedPlayer.java b/src/main/java/org/bukkit/ConnectedPlayer.java
new file mode 100644
index 0000000..8febe82
--- /dev/null
+++ b/src/main/java/org/bukkit/ConnectedPlayer.java
@@ -0,0 +1,19 @@
+package org.bukkit;
+
+import java.net.InetSocketAddress;
+
+/**
+ * A player who is either logged in, or in the process of logging in.
+ *
+ * A player may have multiple instances of this over the lifetime of a single connection,
+ * so instances should always be compared with {@link #equals(Object)}.
+ */
+public interface ConnectedPlayer extends OfflinePlayer {
+
+    /**
+     * Gets the socket address of this player
+     *
+     * @return the player's address
+     */
+    InetSocketAddress getAddress();
+}
diff --git a/src/main/java/org/bukkit/Identifiable.java b/src/main/java/org/bukkit/Identifiable.java
new file mode 100644
index 0000000..c3c9c0e
--- /dev/null
+++ b/src/main/java/org/bukkit/Identifiable.java
@@ -0,0 +1,10 @@
+package org.bukkit;
+
+import java.util.UUID;
+
+/**
+ * Something identified by a {@link UUID} (i.e. a player or entity)
+ */
+public interface Identifiable {
+    UUID getUniqueId();
+}
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index 98494cb..c24a96a 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -77,6 +77,14 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
     public void setWhitelisted(boolean value);
 
     /**
+     * Return an {@link OfflinePlayer} instance suitable for use across multiple online sessions.
+     *
+     * This object should be used to reference a {@link Player} after they disconnect,
+     * without leaking any per-connection resources.
+     */
+    OfflinePlayer getOfflinePlayer();
+
+    /**
      * Gets a {@link Player} object that this represents, if there is one
      * <p>
      * If the player is online, this will return that player. Otherwise,
diff --git a/src/main/java/org/bukkit/entity/AnimalTamer.java b/src/main/java/org/bukkit/entity/AnimalTamer.java
index 5f74f0d..419fd5d 100644
--- a/src/main/java/org/bukkit/entity/AnimalTamer.java
+++ b/src/main/java/org/bukkit/entity/AnimalTamer.java
@@ -2,7 +2,9 @@ package org.bukkit.entity;
 
 import java.util.UUID;
 
-public interface AnimalTamer {
+import org.bukkit.Identifiable;
+
+public interface AnimalTamer extends Identifiable {
 
     /**
      * This is the name of the specified AnimalTamer.
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index fa44c2f..24566a1 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1,6 +1,7 @@
 package org.bukkit.entity;
 
 import org.bukkit.EntityLocation;
+import org.bukkit.Identifiable;
 import org.bukkit.Location;
 import org.bukkit.EntityEffect;
 import org.bukkit.PoseFlag;
@@ -21,7 +22,7 @@ import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 /**
  * Represents a base entity in the world
  */
-public interface Entity extends Metadatable, CommandSender, Physical {
+public interface Entity extends Metadatable, CommandSender, Physical, Identifiable {
 
     /**
      * Gets the entity's current position
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index acad785..9a88505 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -7,13 +7,13 @@ import java.util.Set;
 import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.Achievement;
 import org.bukkit.ChatColor;
+import org.bukkit.ConnectedPlayer;
 import org.bukkit.Effect;
 import org.bukkit.GameMode;
 import org.bukkit.Instrument;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.Note;
-import org.bukkit.OfflinePlayer;
 import org.bukkit.Particle;
 import org.bukkit.Skin;
 import org.bukkit.Sound;
@@ -31,7 +31,7 @@ import org.bukkit.util.Vector;
 /**
  * Represents a player, connected or not
  */
-public interface Player extends HumanEntity, Conversable, CommandSender, OfflinePlayer, PluginMessageRecipient, tc.oc.minecraft.api.entity.Player {
+public interface Player extends HumanEntity, Conversable, CommandSender, ConnectedPlayer, PluginMessageRecipient, tc.oc.minecraft.api.entity.Player {
 
     /**
      * Set a fake name for this player when viewed by the given player.
diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
index 009b772..bf3b26f 100644
--- a/src/main/java/org/bukkit/event/Event.java
+++ b/src/main/java/org/bukkit/event/Event.java
@@ -3,6 +3,9 @@ package org.bukkit.event;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 import java.util.concurrent.ExecutionException;
 
 import com.google.common.cache.CacheBuilder;
@@ -10,6 +13,7 @@ import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
 import com.google.common.util.concurrent.UncheckedExecutionException;
 import org.bukkit.Bukkit;
+import org.bukkit.Identifiable;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginManager;
 
@@ -59,6 +63,32 @@ public abstract class Event {
     }
 
     /**
+     * Return an immutable list of all {@link Identifiable}s involved in this event.
+     *
+     * For a few types of events, it is possible for this list to change
+     * while the event is being dispatched, due to handlers altering
+     * the state of the event.
+     */
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.emptyList();
+    }
+
+    /**
+     * Return an immutable list of all {@link T}s involved in this event.
+     *
+     * @see #getInvolved()
+     */
+    public <T extends Identifiable> List<? extends T> getInvolved(Class<T> type) {
+        final List<T> filtered = new ArrayList<T>();
+        for(Identifiable identifiable : getInvolved()) {
+            if(type.isInstance(identifiable)) {
+                filtered.add(type.cast(identifiable));
+            }
+        }
+        return Collections.unmodifiableList(filtered);
+    }
+
+    /**
      * Continue dispatch of this event by calling {@link PluginManager#yield(Event)}.
      */
     public void yield() {
diff --git a/src/main/java/org/bukkit/event/block/BlockBreakEvent.java b/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
index 6175915..ab2f115 100644
--- a/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.block;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -51,6 +55,11 @@ public class BlockBreakEvent extends BlockExpEvent implements Cancellable, Playe
         return getPlayer();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getPlayer());
+    }
+
     public boolean isCancelled() {
         return cancel;
     }
diff --git a/src/main/java/org/bukkit/event/block/BlockDamageEvent.java b/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
index 77f36df..ef2128d 100644
--- a/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.block;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -41,6 +45,11 @@ public class BlockDamageEvent extends BlockEvent implements Cancellable, PlayerA
         return getPlayer();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getPlayer());
+    }
+
     /**
      * Gets if the block is set to instantly break when damaged by the player.
      *
diff --git a/src/main/java/org/bukkit/event/block/BlockDispenseEntityEvent.java b/src/main/java/org/bukkit/event/block/BlockDispenseEntityEvent.java
index 9d2227e..68ce865 100644
--- a/src/main/java/org/bukkit/event/block/BlockDispenseEntityEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDispenseEntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.block;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
@@ -33,6 +37,11 @@ public class BlockDispenseEntityEvent extends BlockDispenseEvent implements Canc
         return entity;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getEntity());
+    }
+
     /**
      * Get the initial location of the dispensed entity
      */
diff --git a/src/main/java/org/bukkit/event/block/BlockFallEvent.java b/src/main/java/org/bukkit/event/block/BlockFallEvent.java
index f1f4e84..3f3492f 100644
--- a/src/main/java/org/bukkit/event/block/BlockFallEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFallEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.block;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.block.Block;
 import org.bukkit.entity.FallingBlock;
 import org.bukkit.event.Cancellable;
@@ -19,6 +23,11 @@ public class BlockFallEvent extends BlockEvent implements Cancellable {
         return fallingBlock;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getEntity());
+    }
+
     public boolean isCancelled() {
         return cancelled;
     }
diff --git a/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java b/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
index 7f4e9b3..2e3cfc4 100644
--- a/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.block;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
@@ -94,6 +98,12 @@ public class BlockIgniteEvent extends BlockEvent implements Cancellable, EntityA
         return ignitingBlock;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return ignitingEntity != null ? Collections.singletonList(ignitingEntity)
+                                      : super.getInvolved();
+    }
+
     /**
      * An enum to specify the cause of the ignite
      */
diff --git a/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
index e83cd5e..79df54a 100644
--- a/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.block;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Player;
@@ -62,6 +66,11 @@ public class BlockPlaceEvent extends BlockEvent implements Cancellable, PlayerAc
         return getPlayer();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getPlayer());
+    }
+
     /**
      * Clarity method for getting the placed block. Not really needed except
      * for reasons of clarity.
diff --git a/src/main/java/org/bukkit/event/block/BlockUndamageEvent.java b/src/main/java/org/bukkit/event/block/BlockUndamageEvent.java
index da5221f..dae4f4d 100644
--- a/src/main/java/org/bukkit/event/block/BlockUndamageEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockUndamageEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.block;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
@@ -36,6 +40,11 @@ public class BlockUndamageEvent extends BlockEvent implements PlayerAction {
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getPlayer());
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java b/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
index 3a0fbba..31034d2 100644
--- a/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
@@ -1,6 +1,10 @@
 package org.bukkit.event.block;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.google.common.base.Preconditions;
+import org.bukkit.Identifiable;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.Cancellable;
@@ -33,6 +37,12 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
         return entity;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return entity != null ? Collections.singletonList(entity)
+                              : super.getInvolved();
+    }
+
     public ChangeReason getReason() {
         return reason;
     }
diff --git a/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java b/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java
index 5ae084c..b4a66ac 100644
--- a/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java
+++ b/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.block;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Entity;
@@ -36,4 +40,9 @@ public class EntityBlockFormEvent extends BlockFormEvent implements EntityAction
     public Entity getActor() {
         return getEntity();
     }
+
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getEntity());
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
index 14a3808..1f3296d 100644
--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
@@ -1,7 +1,11 @@
 package org.bukkit.event.block;
 
+import java.util.Collections;
+import java.util.List;
+
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.chat.TextComponent;
+import org.bukkit.Identifiable;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -39,6 +43,11 @@ public class SignChangeEvent extends BlockEvent implements Cancellable, PlayerAc
         return getPlayer();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getPlayer());
+    }
+
     /**
      * Gets all of the lines of text from the sign involved in this event.
      *
diff --git a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
index 849b69f..a44993f 100644
--- a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
+++ b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
@@ -2,10 +2,12 @@ package org.bukkit.event.entity;
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.Identifiable;
 import org.bukkit.entity.AreaEffectCloud;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.ThrownPotion;
@@ -45,6 +47,14 @@ public class AreaEffectCloudApplyEvent extends EntityEvent {
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        final List<Identifiable> identifiables = new ArrayList<Identifiable>();
+        identifiables.add(getEntity());
+        identifiables.addAll(getAffectedEntities());
+        return Collections.unmodifiableList(identifiables);
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java b/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
index c07a210..2b800fc 100644
--- a/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
+++ b/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Creeper;
 import org.bukkit.entity.LightningStrike;
 import org.bukkit.event.Cancellable;
@@ -54,6 +58,11 @@ public class CreeperPowerEvent extends EntityEvent implements Cancellable, Entit
         return getLightning();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getLightning());
+    }
+
     /**
      * Gets the cause of the creeper being (un)powered.
      *
diff --git a/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java b/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
index f8b58e2..d2ae97a 100644
--- a/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
@@ -1,6 +1,10 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
 import org.apache.commons.lang.Validate;
+import org.bukkit.Identifiable;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
@@ -70,6 +74,12 @@ public class EntityBreedEvent extends EntityEvent implements Cancellable {
         return breeder;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return getBreeder() != null ? Arrays.asList(getEntity(), getMother(), getFather(), getBreeder())
+                                    : Arrays.asList(getEntity(), getMother(), getFather());
+    }
+
     /**
      * The ItemStack that was used to initiate breeding, if present.
      *
diff --git a/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java
index 0c5d568..5dff626 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.EntityAction;
 
@@ -27,4 +31,9 @@ public class EntityCombustByEntityEvent extends EntityCombustEvent implements En
     public Entity getActor() {
         return getCombuster();
     }
+
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getCombuster());
+    }
 }
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
index 0b1c59d..8b6f4b5 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
@@ -1,8 +1,11 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
 import java.util.Map;
 
 import com.google.common.base.Function;
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.EntityAction;
 
@@ -41,4 +44,9 @@ public class EntityDamageByEntityEvent extends EntityDamageEvent implements Enti
     public Entity getActor() {
         return getDamager();
     }
+
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getDamager());
+    }
 }
diff --git a/src/main/java/org/bukkit/event/entity/EntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityEvent.java
index 0cebd9f..4920e59 100644
--- a/src/main/java/org/bukkit/event/entity/EntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.World;
 import org.bukkit.Physical;
 import org.bukkit.entity.Entity;
@@ -25,6 +29,11 @@ public abstract class EntityEvent extends Event implements Physical {
         return entity;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getEntity());
+    }
+
     /**
      * Gets the EntityType of the Entity involved in this event.
      *
diff --git a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
index 51e6d7a..1101715 100644
--- a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Projectile;
@@ -79,6 +83,11 @@ public class EntityShootBowEvent extends EntityActionBase implements Cancellable
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getProjectile());
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityTameEvent.java b/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
index 4115e07..53e273f 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.AnimalTamer;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
@@ -48,6 +52,11 @@ public class EntityTameEvent extends EntityEvent implements Cancellable, PlayerA
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getOwner());
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
index 12850b0..1d769d5 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
@@ -65,6 +69,11 @@ public class EntityTargetEvent extends EntityActionBase implements Cancellable {
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getTarget());
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/ExplosionPrimeByEntityEvent.java b/src/main/java/org/bukkit/event/entity/ExplosionPrimeByEntityEvent.java
index 580513c..27917c4 100644
--- a/src/main/java/org/bukkit/event/entity/ExplosionPrimeByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ExplosionPrimeByEntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Explosive;
 import org.bukkit.event.EntityAction;
@@ -37,4 +41,9 @@ public class ExplosionPrimeByEntityEvent extends ExplosionPrimeEvent implements
     public Entity getActor() {
         return getPrimer();
     }
+
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getPrimer());
+    }
 }
diff --git a/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java b/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
index dadf221..5db2b02 100644
--- a/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Item;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
@@ -40,6 +44,11 @@ public class ItemMergeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getTarget());
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
index 09861a5..d3756c3 100644
--- a/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
@@ -1,10 +1,13 @@
 package org.bukkit.event.entity;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
+import java.util.List;
 import java.util.Map;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.Identifiable;
 import org.bukkit.entity.AreaEffectCloud;
 import org.bukkit.entity.LingeringPotion;
 import org.bukkit.entity.LivingEntity;
@@ -39,6 +42,11 @@ public class LingeringPotionSplashEvent extends ProjectileHitEvent implements Ca
         return entity;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getAreaEffectCloud());
+    }
+
     public boolean isCancelled() {
         return cancelled;
     }
diff --git a/src/main/java/org/bukkit/event/entity/PigZapEvent.java b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
index f494064..0caac8b 100644
--- a/src/main/java/org/bukkit/event/entity/PigZapEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.LightningStrike;
 import org.bukkit.entity.Pig;
 import org.bukkit.entity.PigZombie;
@@ -60,6 +64,11 @@ public class PigZapEvent extends EntityEvent implements Cancellable, EntityActio
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getLightning(), getPigZombie());
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
index 5bf8590..d32ef2c 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.World;
 import org.bukkit.Physical;
 import org.bukkit.entity.Entity;
@@ -58,6 +62,14 @@ public class PlayerLeashEntityEvent extends Event implements Cancellable, Physic
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        // AFAIK, leashHolder is either the Player, or a LeashHitch
+        return getPlayer().equals(getLeashHolder())
+               ? Arrays.asList(getPlayer(), getEntity())
+               : Arrays.asList(getPlayer(), getEntity(), getLeashHolder());
+    }
+
+    @Override
     public World getWorld() {
         return getEntity().getWorld();
     }
diff --git a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
index b9840de..2213b05 100644
--- a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
@@ -2,9 +2,12 @@ package org.bukkit.event.entity;
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
 import java.util.Map;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.Identifiable;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.ThrownPotion;
 import org.bukkit.event.Cancellable;
@@ -47,6 +50,14 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
         return new ArrayList<LivingEntity>(affectedEntities.keySet());
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        final List<Identifiable> identifiables = new ArrayList<Identifiable>();
+        identifiables.add(getPotion());
+        identifiables.addAll(getAffectedEntities());
+        return Collections.unmodifiableList(identifiables);
+    }
+
     /**
      * Gets the intensity of the potion's effects for given entity; This
      * depends on the distance to the impact center
diff --git a/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java b/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
index 0e633d9..60c6a81 100644
--- a/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.entity;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Projectile;
 import org.bukkit.event.Cancellable;
@@ -38,6 +42,13 @@ public class ProjectileLaunchEvent extends EntityEvent implements Cancellable, E
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        final ProjectileSource source = getEntity().getShooter();
+        return source instanceof Identifiable ? Arrays.asList(getEntity(), (Identifiable) source)
+                                              : super.getInvolved();
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java b/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java
index 17a884f..8c4594b 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.hanging;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Hanging;
 import org.bukkit.event.EntityAction;
@@ -28,4 +32,9 @@ public class HangingBreakByEntityEvent extends HangingBreakEvent implements Enti
     public Entity getActor() {
         return getRemover();
     }
+
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getRemover());
+    }
 }
diff --git a/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java b/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
index f7826d3..107e248 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.hanging;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.entity.Hanging;
@@ -39,6 +43,11 @@ public class HangingPlaceEvent extends HangingEvent implements Cancellable, Play
         return getPlayer();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getPlayer());
+    }
+
     /**
      * Returns the block that the hanging entity was placed on
      *
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
index 1d6bdd6..6f3024a 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.inventory;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
@@ -35,6 +39,11 @@ public class FurnaceExtractEvent extends BlockExpEvent implements PlayerAction {
         return getPlayer();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getPlayer());
+    }
+
     /**
      * Get the Material of the item being retrieved
      *
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
index 804ff44..d45d46f 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
@@ -1,8 +1,11 @@
 
 package org.bukkit.event.inventory;
 
+import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
+import org.bukkit.Identifiable;
 import org.bukkit.World;
 import org.bukkit.Physical;
 import org.bukkit.entity.Player;
@@ -11,6 +14,7 @@ import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.Event;
 import org.bukkit.event.PlayerAction;
 import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.InventoryView;
 
 /**
@@ -63,6 +67,13 @@ public class InventoryEvent extends Event implements Physical, PlayerAction {
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        final InventoryHolder holder = getInventory().getHolder();
+        return holder instanceof Identifiable ? Arrays.asList(getActor(), (Identifiable) holder)
+                                              : Collections.singletonList(getActor());
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
index d3cbe0b..5f57f22 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
@@ -1,6 +1,11 @@
 package org.bukkit.event.inventory;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
 import org.apache.commons.lang.Validate;
+import org.bukkit.Identifiable;
 import org.bukkit.World;
 import org.bukkit.Physical;
 import org.bukkit.entity.Entity;
@@ -101,6 +106,16 @@ public class InventoryMoveItemEvent extends Event implements Cancellable, Physic
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        final List<Identifiable> identifiables = new ArrayList<Identifiable>();
+        final InventoryHolder src = getSource().getHolder();
+        final InventoryHolder dest = getDestination().getHolder();
+        if(src instanceof Identifiable) identifiables.add((Identifiable) src);
+        if(dest instanceof Identifiable) identifiables.add((Identifiable) dest);
+        return Collections.unmodifiableList(identifiables);
+    }
+
+    @Override
     public World getWorld() {
         return getInitiator().getWorld();
     }
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
index 98357d9..521c975 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
@@ -1,5 +1,10 @@
 package org.bukkit.event.inventory;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.World;
 import org.bukkit.Physical;
 import org.bukkit.entity.Entity;
@@ -51,6 +56,13 @@ public class InventoryPickupItemEvent extends Event implements Cancellable, Phys
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        final InventoryHolder holder = getInventory().getHolder();
+        return holder instanceof Identifiable ? Arrays.asList(getItem(), (Identifiable) holder)
+                                              : Collections.singletonList(getItem());
+    }
+
+    @Override
     public World getWorld() {
         return getInventory().getHolder().getWorld();
     }
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index 78c5ea2..7e3dbe5 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -1,8 +1,12 @@
 package org.bukkit.event.player;
 
 import java.net.InetAddress;
+import java.util.Collections;
+import java.util.List;
 import java.util.UUID;
 
+import org.bukkit.ConnectedPlayer;
+import org.bukkit.Identifiable;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 
@@ -15,22 +19,13 @@ public class AsyncPlayerPreLoginEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     private Result result;
     private String message;
-    private final String name;
-    private final InetAddress ipAddress;
-    private final UUID uniqueId;
+    private final ConnectedPlayer player;
 
-    @Deprecated
-    public AsyncPlayerPreLoginEvent(final String name, final InetAddress ipAddress) {
-        this(name, ipAddress, null);
-    }
-
-    public AsyncPlayerPreLoginEvent(final String name, final InetAddress ipAddress, final UUID uniqueId) {
+    public AsyncPlayerPreLoginEvent(ConnectedPlayer player) {
         super(true);
         this.result = Result.ALLOWED;
         this.message = "";
-        this.name = name;
-        this.ipAddress = ipAddress;
-        this.uniqueId = uniqueId;
+        this.player = player;
     }
 
     /**
@@ -136,7 +131,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      * @return the player's name
      */
     public String getName() {
-        return name;
+        return player.getName();
     }
 
     /**
@@ -145,7 +140,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      * @return The IP address
      */
     public InetAddress getAddress() {
-        return ipAddress;
+        return player.getAddress().getAddress();
     }
 
     /**
@@ -154,7 +149,16 @@ public class AsyncPlayerPreLoginEvent extends Event {
      * @return The unique ID
      */
     public UUID getUniqueId() {
-        return uniqueId;
+        return player.getUniqueId();
+    }
+
+    public ConnectedPlayer getPlayer() {
+        return player;
+    }
+
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getPlayer());
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerAttackEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerAttackEntityEvent.java
index 589a3dd..ebb417b 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAttackEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAttackEntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -37,6 +41,11 @@ public class PlayerAttackEntityEvent extends PlayerActionBase implements Cancell
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getPlayer(), getLeftClicked());
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
index f37ce2b..fa2effc 100644
--- a/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Item;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -27,6 +31,11 @@ public class PlayerDropItemEvent extends PlayerActionBase implements Cancellable
         return drop;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getPlayer(), getItemDrop());
+    }
+
     public boolean isCancelled() {
         return cancel;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
index 89ac3bb..9f4dc1e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Egg;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Player;
@@ -32,6 +36,11 @@ public class PlayerEggThrowEvent extends PlayerActionBase {
         return egg;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getPlayer(), getEgg());
+    }
+
     /**
      * Gets whether the egg is hatching or not. Will be what the server
      * would've done without interaction.
diff --git a/src/main/java/org/bukkit/event/player/PlayerEvent.java b/src/main/java/org/bukkit/event/player/PlayerEvent.java
index 8e0ddfc..1c8cccc 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.World;
 import org.bukkit.Physical;
 import org.bukkit.entity.Player;
@@ -34,4 +38,9 @@ public abstract class PlayerEvent extends Event implements Physical {
     public World getWorld() {
         return getPlayer().getWorld();
     }
+
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getPlayer());
+    }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerFishEvent.java b/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
index 945ef89..e0a78fd 100644
--- a/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Fish;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -58,6 +62,12 @@ public class PlayerFishEvent extends PlayerActionBase implements Cancellable {
         return hookEntity;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return getCaught() != null ? Arrays.asList(getPlayer(), getHook(), getCaught())
+                                   : Arrays.asList(getPlayer(), getHook());
+    }
+
     public boolean isCancelled() {
         return cancel;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
index 13d6c6d..6e91644 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -42,6 +46,11 @@ public class PlayerInteractEntityEvent extends PlayerActionBase implements Cance
         return this.clickedEntity;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getPlayer(), getRightClicked());
+    }
+
     /**
      * The hand used to perform this interaction.
      *
diff --git a/src/main/java/org/bukkit/event/player/PlayerKnockbackEvent.java b/src/main/java/org/bukkit/event/player/PlayerKnockbackEvent.java
index 7411633..b9dc667 100644
--- a/src/main/java/org/bukkit/event/player/PlayerKnockbackEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerKnockbackEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.util.Vector;
@@ -23,4 +27,9 @@ public class PlayerKnockbackEvent extends PlayerVelocityEvent {
     public Entity getDamager() {
         return damager;
     }
+
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getPlayer(), getDamager());
+    }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerPickupArrowEvent.java b/src/main/java/org/bukkit/event/player/PlayerPickupArrowEvent.java
index 97399ed..a2cd0be 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPickupArrowEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPickupArrowEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Arrow;
 import org.bukkit.entity.Item;
 import org.bukkit.entity.Player;
@@ -24,4 +28,9 @@ public class PlayerPickupArrowEvent extends PlayerPickupItemEvent {
     public Arrow getArrow() {
         return arrow;
     }
+
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getPlayer(), getItem(), getArrow());
+    }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerPickupExperienceEvent.java b/src/main/java/org/bukkit/event/player/PlayerPickupExperienceEvent.java
index 788fe46..6c1f225 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPickupExperienceEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPickupExperienceEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.ExperienceOrb;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -19,6 +23,11 @@ public class PlayerPickupExperienceEvent extends PlayerActionBase implements Can
         return experienceorb;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getPlayer(), getExperienceOrb());
+    }
+
     public boolean isCancelled() {
         return cancel;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
index 30e450c..e245093 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Item;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -29,6 +33,11 @@ public class PlayerPickupItemEvent extends PlayerActionBase implements Cancellab
         return item;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getPlayer(), getItem());
+    }
+
     /**
      * Gets the amount remaining on the ground, if any
      *
diff --git a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
index aa49dfa..bec23dc 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
@@ -1,8 +1,12 @@
 package org.bukkit.event.player;
 
 import java.net.InetAddress;
+import java.util.Collections;
+import java.util.List;
 import java.util.UUID;
 
+import org.bukkit.ConnectedPlayer;
+import org.bukkit.Identifiable;
 import org.bukkit.Warning;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
@@ -20,21 +24,12 @@ public class PlayerPreLoginEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     private Result result;
     private String message;
-    private final String name;
-    private final InetAddress ipAddress;
-    private final UUID uniqueId;
+    private final ConnectedPlayer player;
 
-    @Deprecated
-    public PlayerPreLoginEvent(final String name, final InetAddress ipAddress) {
-        this(name, ipAddress, null);
-    }
-
-    public PlayerPreLoginEvent(final String name, final InetAddress ipAddress, final UUID uniqueId) {
+    public PlayerPreLoginEvent(ConnectedPlayer player) {
         this.result = Result.ALLOWED;
         this.message = "";
-        this.name = name;
-        this.ipAddress = ipAddress;
-        this.uniqueId = uniqueId;
+        this.player = player;
     }
 
     /**
@@ -99,7 +94,7 @@ public class PlayerPreLoginEvent extends Event {
      * @return the player's name
      */
     public String getName() {
-        return name;
+        return player.getName();
     }
 
     /**
@@ -108,7 +103,7 @@ public class PlayerPreLoginEvent extends Event {
      * @return The IP address
      */
     public InetAddress getAddress() {
-        return ipAddress;
+        return player.getAddress().getAddress();
     }
 
     @Override
@@ -122,7 +117,16 @@ public class PlayerPreLoginEvent extends Event {
      * @return The unique ID
      */
     public UUID getUniqueId() {
-        return uniqueId;
+        return player.getUniqueId();
+    }
+
+    public ConnectedPlayer getPlayer() {
+        return player;
+    }
+
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getPlayer());
     }
 
     public static HandlerList getHandlerList() {
diff --git a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
index 9448685..909d5f3 100644
--- a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -37,6 +41,11 @@ public class PlayerShearEntityEvent extends PlayerActionBase implements Cancella
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getPlayer(), getEntity());
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerSpawnEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerSpawnEntityEvent.java
index 8e98f37..1b2d964 100644
--- a/src/main/java/org/bukkit/event/player/PlayerSpawnEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerSpawnEntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.Location;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
@@ -39,6 +43,11 @@ public class PlayerSpawnEntityEvent extends PlayerActionBase implements Cancella
         return what;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getPlayer(), getEntity());
+    }
+
     /**
      * Gets the item that is being used to spawn an entity.
      * Modifying the returned item will have no effect.
diff --git a/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
index 97870dd..e8a82b3 100644
--- a/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.player;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -32,6 +36,11 @@ public class PlayerUnleashEntityEvent extends EntityUnleashEvent implements Canc
         return getPlayer();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getEntity(), getPlayer());
+    }
+
     public boolean isCancelled() {
         return cancelled;
     }
diff --git a/src/main/java/org/bukkit/event/server/ServerCommandEvent.java b/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
index 10ea0f0..5c01b93 100644
--- a/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.server;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.command.CommandSender;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
@@ -78,6 +82,12 @@ public class ServerCommandEvent extends ServerEvent implements Cancellable {
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return sender instanceof Identifiable ? Collections.singletonList((Identifiable) sender)
+                                              : super.getInvolved();
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
index 6ac437d..2e86147 100644
--- a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
+++ b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
@@ -1,7 +1,9 @@
 package org.bukkit.event.server;
 
+import java.util.Collections;
 import java.util.List;
 import org.apache.commons.lang.Validate;
+import org.bukkit.Identifiable;
 import org.bukkit.command.CommandSender;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
@@ -39,6 +41,12 @@ public class TabCompleteEvent extends Event implements Cancellable {
         return sender;
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return sender instanceof Identifiable ? Collections.singletonList((Identifiable) sender)
+                                              : super.getInvolved();
+    }
+
     /**
      * Return the entire buffer which formed the basis of this completion.
      *
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
index 2296ab4..6dc4353 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.vehicle;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.event.Cancellable;
@@ -41,6 +45,11 @@ public class VehicleDamageEvent extends VehicleEvent implements Cancellable, Ent
         return getAttacker();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getVehicle(), getAttacker());
+    }
+
     /**
      * Gets the damage done to the vehicle
      *
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
index 5b0f545..103ab9f 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.vehicle;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.event.Cancellable;
@@ -35,6 +39,13 @@ public class VehicleDestroyEvent extends VehicleEvent implements Cancellable, En
         return getAttacker();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        final Entity attacker = getAttacker();
+        return attacker == null ? super.getInvolved()
+                                : Arrays.asList(getVehicle(), attacker);
+    }
+
     public boolean isCancelled() {
         return cancelled;
     }
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
index 029a028..5574871 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.vehicle;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.event.Cancellable;
@@ -33,6 +37,11 @@ public class VehicleEnterEvent extends VehicleEvent implements Cancellable, Enti
         return getEntered();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getVehicle(), getEntered());
+    }
+
     public boolean isCancelled() {
         return cancelled;
     }
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
index caf865d..ceb0498 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.vehicle;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.event.Cancellable;
@@ -30,6 +34,11 @@ public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implement
         return getEntity();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getVehicle(), getEntity());
+    }
+
     public boolean isCancelled() {
         return cancelled;
     }
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
index 3a00b5b..7c107e8 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.vehicle;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.World;
 import org.bukkit.Physical;
 import org.bukkit.entity.Vehicle;
@@ -25,6 +29,11 @@ public abstract class VehicleEvent extends Event implements Physical {
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getVehicle());
+    }
+
+    @Override
     public World getWorld() {
         return getVehicle().getWorld();
     }
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
index ab44ac6..9290b73 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
@@ -1,5 +1,9 @@
 package org.bukkit.event.vehicle;
 
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.event.Cancellable;
@@ -33,6 +37,11 @@ public class VehicleExitEvent extends VehicleEvent implements Cancellable, Entit
         return getExited();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Arrays.asList(getVehicle(), getExited());
+    }
+
     public boolean isCancelled() {
         return cancelled;
     }
diff --git a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
index 00b5127..4997e39 100644
--- a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
@@ -1,6 +1,11 @@
 package org.bukkit.event.weather;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.World;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.LightningStrike;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.EntityAction;
@@ -42,6 +47,11 @@ public class LightningStrikeEvent extends WeatherEvent implements Cancellable, E
     }
 
     @Override
+    public List<? extends Identifiable> getInvolved() {
+        return Collections.singletonList(getLightning());
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
index 5c1f51f..1843b83 100644
--- a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
+++ b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
@@ -1,6 +1,9 @@
 package org.bukkit.event.world;
 
+import java.util.Collections;
 import java.util.List;
+
+import org.bukkit.Identifiable;
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
@@ -74,6 +77,12 @@ public class StructureGrowEvent extends WorldEvent implements Cancellable, Playe
         return getPlayer();
     }
 
+    @Override
+    public List<? extends Identifiable> getInvolved() {
+        return player != null ? Collections.singletonList(player)
+                              : super.getInvolved();
+    }
+
     /**
      * Gets an ArrayList of all blocks associated with the structure.
      *
-- 
1.9.0


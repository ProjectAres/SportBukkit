From 23ab948f39bc9a157c70c3499b942aafddb524fc Mon Sep 17 00:00:00 2001
From: mrapple <tony@oc.tc>
Date: Sat, 17 Nov 2012 12:41:06 -0600
Subject: [PATCH] Make AsyncPlayerPreLoginEvent more versatile


diff --git a/src/main/java/net/minecraft/server/ThreadPlayerLookupUUID.java b/src/main/java/net/minecraft/server/ThreadPlayerLookupUUID.java
index cc96775..09580d7 100644
--- a/src/main/java/net/minecraft/server/ThreadPlayerLookupUUID.java
+++ b/src/main/java/net/minecraft/server/ThreadPlayerLookupUUID.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import java.math.BigInteger;
+import java.net.HttpURLConnection; // CraftBukkit
 
 import net.minecraft.util.com.mojang.authlib.GameProfile;
 import net.minecraft.util.com.mojang.authlib.exceptions.AuthenticationUnavailableException;
@@ -21,62 +22,55 @@ class ThreadPlayerLookupUUID extends Thread {
     }
 
     public void run() {
+        boolean allowed = false; // CraftBukkit
         try {
             String s = (new BigInteger(MinecraftEncryption.a(LoginListener.a(this.a), LoginListener.b(this.a).I().getPublic(), LoginListener.c(this.a)))).toString(16);
 
             LoginListener.a(this.a, LoginListener.b(this.a).as().hasJoinedServer(new GameProfile((String) null, LoginListener.d(this.a).getName()), s));
-            if (LoginListener.d(this.a) != null) {
-                // CraftBukkit start
-                if (!this.a.networkManager.d()) {
-                    return;
-                }
+        } catch(Exception exception) {}
 
-                String playerName = LoginListener.d(this.a).getName();
-                java.net.InetAddress address = ((java.net.InetSocketAddress) a.networkManager.getSocketAddress()).getAddress();
-                final org.bukkit.craftbukkit.CraftServer server = LoginListener.b(this.a).server;
+        // CraftBukkit start
+        allowed = LoginListener.d(this.a) != null;
 
-                AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address);
-                server.getPluginManager().callEvent(asyncEvent);
+        if (!this.a.networkManager.d()) {
+            return;
+        }
 
-                if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
-                    final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address);
-                    if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
-                        event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
-                    }
-                    Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
-                        @Override
-                        protected PlayerPreLoginEvent.Result evaluate() {
-                            server.getPluginManager().callEvent(event);
-                            return event.getResult();
-                        }};
+        String playerName = LoginListener.d(this.a).getName();
+        java.net.InetAddress address = ((java.net.InetSocketAddress) a.networkManager.getSocketAddress()).getAddress();
+        final org.bukkit.craftbukkit.CraftServer server = LoginListener.b(this.a).server;
 
-                    LoginListener.b(this.a).processQueue.add(waitable);
-                    if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
-                        this.a.disconnect(event.getKickMessage());
-                        return;
-                    }
-                } else {
-                    if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
-                        this.a.disconnect(asyncEvent.getKickMessage());
-                        return;
-                    }
-                }
-                // CraftBukkit end
+        AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, allowed);
+        server.getPluginManager().callEvent(asyncEvent);
 
-                LoginListener.e().info("UUID of player " + LoginListener.d(this.a).getName() + " is " + LoginListener.d(this.a).getId());
-                LoginListener.a(this.a, EnumProtocolState.READY_TO_ACCEPT);
-            } else {
-                this.a.disconnect("Failed to verify username!");
-                LoginListener.e().error("Username \'" + LoginListener.d(this.a).getName() + "\' tried to join with an invalid session");
+        if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address);
+            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+            }
+            Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                @Override
+                protected PlayerPreLoginEvent.Result evaluate() {
+                    server.getPluginManager().callEvent(event);
+                    return event.getResult();
+                }};
+
+            LoginListener.b(this.a).processQueue.add(waitable);
+            try {
+                if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                    this.a.disconnect(event.getKickMessage());
+                    return;
+                }
+            } catch(Exception exception) {}
+        } else {
+            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                this.a.disconnect(asyncEvent.getKickMessage());
+                return;
             }
-        } catch (AuthenticationUnavailableException authenticationunavailableexception) {
-            this.a.disconnect("Authentication servers are down. Please try again later, sorry!");
-            LoginListener.e().error("Couldn\'t verify username because servers are unavailable");
-            // CraftBukkit start
-        } catch (Exception exception) {
-            this.a.disconnect("Failed to verify username!");
-            LoginListener.b(this.a).server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + LoginListener.d(this.a).getName(), exception);
-            // CraftBukkit end
         }
+        // CraftBukkit end
+
+        LoginListener.e().info("UUID of player " + LoginListener.d(this.a).getName() + " is " + LoginListener.d(this.a).getId());
+        LoginListener.a(this.a, EnumProtocolState.READY_TO_ACCEPT);
     }
 }
-- 
1.8.5.1


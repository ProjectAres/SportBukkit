From f4e88b294dd1965de1e2634e3a671e6c7820e0df Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 1 Feb 2014 05:49:34 -0500
Subject: [PATCH] Add fake name API


diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 4969a5c..8fcbef5 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -362,11 +362,16 @@ public class EntityTrackerEntry {
                     }
 
                     // entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.id));
-                    // CraftBukkit end
 
                     this.trackedPlayers.add(entityplayer);
                     Packet packet = this.c();
 
+                    if(packet instanceof Packet20NamedEntitySpawn) {
+                        ((Packet20NamedEntitySpawn) packet).b = ((Player)this.tracker.getBukkitEntity()).getOverheadName(entityplayer.getBukkitEntity());
+                    }
+
+                    // CraftBukkit end
+
                     entityplayer.playerConnection.sendPacket(packet);
                     if (!this.tracker.getDataWatcher().d()) {
                         this.sendMetadata(this.tracker.getDataWatcher(), true, entityplayer); // CraftBukkit - custom metadata sender
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 3018170..db63ae0 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -16,7 +16,9 @@ import java.io.UnsupportedEncodingException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import java.util.HashSet;
+import java.util.Arrays;
 
+import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.LazyPlayerSet;
@@ -746,6 +748,90 @@ public class PlayerConnection extends Connection {
             Packet6SpawnPosition packet6 = (Packet6SpawnPosition) packet;
             this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.x, packet6.y, packet6.z);
         }
+
+        if (packet instanceof Packet209SetScoreboardTeam) {
+            // Translate fake names in team info packets
+            Player viewer = this.getPlayer();
+            if (viewer != null) {
+                Packet209SetScoreboardTeam oldPacket = (Packet209SetScoreboardTeam) packet;
+
+                if (oldPacket.e.size() == 1) {
+                    // Handle single player team change more efficiently
+                    String realName = (String) oldPacket.e.iterator().next();
+                    String fakeName;
+                    Player player = this.server.getPlayer(realName);
+
+                    if (player != null && (fakeName = player.getFakeName(viewer)) != null) {
+                        Packet209SetScoreboardTeam newPacket = new Packet209SetScoreboardTeam();
+
+                        newPacket.a = oldPacket.a;
+                        newPacket.b = oldPacket.b;
+                        newPacket.c = oldPacket.c;
+                        newPacket.d = oldPacket.d;
+                        newPacket.e = Arrays.asList(fakeName);
+                        newPacket.f = oldPacket.f;
+                        newPacket.g = oldPacket.g;
+
+                        packet = newPacket;
+                    }
+
+                } else if (oldPacket.e.size() > 1) {
+                    ArrayList<String> newNames = null;
+
+                    for (Object o : oldPacket.e) {
+                        String realName = (String) o;
+                        String fakeName;
+                        Player player = this.server.getPlayer(realName);
+
+                        if (player != null && (fakeName = player.getFakeName(viewer)) != null) {
+                            if (newNames == null) {
+                                // Once we've found a fake name, create the new name list
+                                // and copy the names we've already looped over. If there
+                                // are no fake names, no lists are created and the packet
+                                // is not replaced.
+                                newNames = new ArrayList<String>(oldPacket.e.size());
+                                for (Object oo : oldPacket.e) {
+                                    if (oo == o) break;
+                                    newNames.add((String) oo);
+                                }
+                            }
+
+                            newNames.add(fakeName);
+                        } else if (newNames != null) {
+                            newNames.add(realName);
+                        }
+                    }
+
+                    if (newNames != null) {
+                        Packet209SetScoreboardTeam newPacket = new Packet209SetScoreboardTeam();
+
+                        newPacket.a = oldPacket.a;
+                        newPacket.b = oldPacket.b;
+                        newPacket.c = oldPacket.c;
+                        newPacket.d = oldPacket.d;
+                        newPacket.e = newNames;
+                        newPacket.f = oldPacket.f;
+                        newPacket.g = oldPacket.g;
+
+                        packet = newPacket;
+                    }
+                }
+            }
+
+        } else if (packet instanceof Packet201PlayerInfo) {
+            // Translate fake names in player list packets
+            Player viewer = this.getPlayer();
+            if (viewer != null) {
+                Packet201PlayerInfo oldPacket = (Packet201PlayerInfo) packet;
+                Player player = this.server.getPlayer(oldPacket.a);
+                String fakeName;
+                if(player != null && (fakeName = player.getFakeName(viewer)) != null) {
+                    packet = new Packet201PlayerInfo(fakeName, oldPacket.b, oldPacket.c);
+                }
+            }
+
+        }
+
         // CraftBukkit end
 
         try {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 042edd5..5f93538 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -325,7 +325,8 @@ public final class CraftServer implements Server {
         return players;
     }
 
-    public Player getPlayer(final String name) {
+    @Override
+    public Player getPlayer(final String name, final CommandSender viewer) {
         Validate.notNull(name, "Name cannot be null");
 
         Player[] players = getOnlinePlayers();
@@ -334,8 +335,8 @@ public final class CraftServer implements Server {
         String lowerName = name.toLowerCase();
         int delta = Integer.MAX_VALUE;
         for (Player player : players) {
-            if (player.getName().toLowerCase().startsWith(lowerName)) {
-                int curDelta = player.getName().length() - lowerName.length();
+            if (player.getName(viewer).toLowerCase().startsWith(lowerName)) {
+                int curDelta = player.getName(viewer).length() - lowerName.length();
                 if (curDelta < delta) {
                     found = player;
                     delta = curDelta;
@@ -346,13 +347,14 @@ public final class CraftServer implements Server {
         return found;
     }
 
-    public Player getPlayerExact(String name) {
+    @Override
+    public Player getPlayerExact(String name, final CommandSender viewer) {
         Validate.notNull(name, "Name cannot be null");
 
         String lname = name.toLowerCase();
 
         for (Player player : getOnlinePlayers()) {
-            if (player.getName().equalsIgnoreCase(lname)) {
+            if (player.getName(viewer).equalsIgnoreCase(lname)) {
                 return player;
             }
         }
@@ -368,13 +370,14 @@ public final class CraftServer implements Server {
         return entity.playerConnection.getPlayer();
     }
 
-    public List<Player> matchPlayer(String partialName) {
+    @Override
+    public List<Player> matchPlayer(String partialName, final CommandSender viewer) {
         Validate.notNull(partialName, "PartialName cannot be null");
 
         List<Player> matchedPlayers = new ArrayList<Player>();
 
         for (Player iterPlayer : this.getOnlinePlayers()) {
-            String iterPlayerName = iterPlayer.getName();
+            String iterPlayerName = iterPlayer.getName(viewer);
 
             if (partialName.equalsIgnoreCase(iterPlayerName)) {
                 // Exact match
@@ -391,6 +394,21 @@ public final class CraftServer implements Server {
         return matchedPlayers;
     }
 
+    @Override
+    public Player getPlayer(String name) {
+        return this.getPlayer(name, null);
+    }
+
+    @Override
+    public Player getPlayerExact(String name) {
+        return this.getPlayerExact(name, null);
+    }
+
+    @Override
+    public List<Player> matchPlayer(String name) {
+        return this.matchPlayer(name, null);
+    }
+
     public int getMaxPlayers() {
         return playerList.getMaxPlayers();
     }
@@ -1395,8 +1413,8 @@ public final class CraftServer implements Server {
         PlayerChatTabCompleteEvent event = new PlayerChatTabCompleteEvent(player, message, completions);
         String token = event.getLastToken();
         for (Player p : players) {
-            if (player.canSee(p) && StringUtil.startsWithIgnoreCase(p.getName(), token)) {
-                completions.add(p.getName());
+            if (player.canSee(p) && StringUtil.startsWithIgnoreCase(p.getName(player), token)) {
+                completions.add(p.getName(player));
             }
         }
         pluginManager.callEvent(event);
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
index 1314c74..8f875ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
@@ -68,4 +68,9 @@ public abstract class ServerCommandSender implements CommandSender {
     public Server getServer() {
         return Bukkit.getServer();
     }
+
+    @Override
+    public String getName(CommandSender viewer) {
+        return this.getName();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 96d1ecf..384ee9f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.google.common.base.Objects;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.MapMaker;
 
@@ -18,6 +19,9 @@ import java.util.UUID;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import java.util.WeakHashMap;
+import java.util.Arrays;
+
 import net.minecraft.server.*;
 
 import org.apache.commons.lang.Validate;
@@ -28,6 +32,7 @@ import org.bukkit.Achievement;
 import org.bukkit.Material;
 import org.bukkit.Statistic;
 import org.bukkit.World;
+import org.bukkit.command.CommandSender;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
@@ -72,6 +77,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private boolean scaledHealth = false;
     private double healthScale = 20;
 
+    private final Map<CommandSender, String> fakeNames = new WeakHashMap<CommandSender, String>();
+    private final Map<CommandSender, String> fakeDisplayNames = new WeakHashMap<CommandSender, String>();
+
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
         super(server, entity);
 
@@ -153,6 +161,197 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    @Override
+    public boolean hasFakeName(CommandSender viewer) {
+        return viewer != null && this.fakeNames.containsKey(viewer);
+    }
+
+    @Override
+    public void clearFakeNames() {
+        Set<CommandSender> viewers = new HashSet<CommandSender>(this.fakeNames.keySet());
+
+        for(CommandSender viewer : viewers) {
+            this.removeNameOnClient(viewer);
+        }
+
+        this.fakeNames.clear();
+
+        for(CommandSender viewer : viewers) {
+            this.refreshEntityOnClient(viewer);
+            this.addNameOnClient(viewer);
+        }
+    }
+
+    @Override
+    public String getFakeName(CommandSender viewer) {
+        return viewer == null ? null : this.fakeNames.get(viewer);
+    }
+
+    @Override
+    public void setFakeName(CommandSender viewer, String newName) {
+        String oldName = this.fakeNames.get(viewer);
+        if(Objects.equal(oldName, newName)) {
+            return;
+        }
+
+        String realName = this.getName();
+
+        if(newName != null) {
+            if(!realName.equals(this.getPlayerListName())) {
+                throw new IllegalArgumentException("Cannot set a fake name if player list name has been changed");
+            }
+
+            if(!realName.equals(this.getOverheadName())) {
+                throw new IllegalArgumentException("Cannot set a fake name if overhead name has been changed");
+            }
+
+            if (newName.length() > 16) {
+                throw new IllegalArgumentException("Fake player names are limited to 16 characters in length");
+            }
+
+            // Do not let the fake name collide with any other player's real name,
+            // or any other fake name set for the same viewer.
+            for(Player other : this.getServer().getOnlinePlayers()) {
+                if(!other.equals(this) && (newName.equals(other.getName()) || newName.equals(other.getName(viewer)))) {
+                    throw new IllegalArgumentException(newName + " is already in use by another player");
+                }
+            }
+        }
+
+        this.removeNameOnClient(viewer);
+
+        if(newName == null) {
+            this.fakeNames.remove(viewer);
+        } else {
+            this.fakeNames.put(viewer, newName);
+        }
+
+        this.refreshEntityOnClient(viewer);
+        this.addNameOnClient(viewer);
+    }
+
+    /**
+     * Remove this player from the given viewer's scoreboard and player list.
+     */
+    private void removeNameOnClient(CommandSender viewer) {
+        if(viewer instanceof CraftPlayer) {
+            CraftPlayer craftViewer = (CraftPlayer) viewer;
+            EntityPlayer viewerEntity  = craftViewer.getHandle();
+            if(viewerEntity.playerConnection != null) {
+                if(craftViewer.canSee(this)) {
+                    viewerEntity.playerConnection.sendPacket(new Packet201PlayerInfo(this.getName(), false, 9999));
+                }
+
+                ScoreboardTeam team = craftViewer.getScoreboard().getHandle().getPlayerTeam(this.getName());
+                if(team != null) {
+                    viewerEntity.playerConnection.sendPacket(new Packet209SetScoreboardTeam(team, Arrays.asList(this.getName()), 4));
+                }
+            }
+        }
+    }
+
+    /**
+     * Add this player to the given viewer's scoreboard and player list.
+     */
+    private void addNameOnClient(CommandSender viewer) {
+        if(viewer instanceof CraftPlayer) {
+            CraftPlayer craftViewer = (CraftPlayer) viewer;
+            EntityPlayer viewerEntity  = craftViewer.getHandle();
+            if(viewerEntity.playerConnection != null) {
+                if(craftViewer.canSee(this)) {
+                    viewerEntity.playerConnection.sendPacket(new Packet201PlayerInfo(this.getName(), true, this.getHandle().ping));
+                }
+
+                ScoreboardTeam team = craftViewer.getScoreboard().getHandle().getPlayerTeam(this.getName());
+                if(team != null) {
+                    viewerEntity.playerConnection.sendPacket(new Packet209SetScoreboardTeam(team, Arrays.asList(this.getName()), 3));
+                }
+            }
+        }
+    }
+
+    /**
+     * Destroy and respawn this player's entity on the given viewer's client
+     */
+    private void refreshEntityOnClient(CommandSender viewer) {
+        if(viewer instanceof CraftPlayer) {
+            CraftPlayer craftViewer = (CraftPlayer) viewer;
+            if(this.equals(craftViewer) || !craftViewer.canSee(this)) {
+                return;
+            }
+
+            // Re-create the player entity with the new name
+            EntityPlayer viewerEntity  = craftViewer.getHandle();
+            EntityTracker tracker = ((WorldServer) this.entity.world).tracker;
+            EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(this.getHandle().id);
+
+            if (entry != null) {
+                entry.clear(viewerEntity);
+                entry.updatePlayer(viewerEntity);
+            }
+        }
+    }
+
+    @Override
+    public boolean hasFakeDisplayName(CommandSender viewer) {
+        return this.fakeDisplayNames.containsKey(viewer);
+    }
+
+    @Override
+    public void clearFakeDisplayNames() {
+        this.fakeDisplayNames.clear();
+    }
+
+    @Override
+    public String getFakeDisplayName(CommandSender viewer) {
+        return viewer == null ? null : this.fakeDisplayNames.get(viewer);
+    }
+
+    @Override
+    public void setFakeDisplayName(CommandSender viewer, String name) {
+        if(name == null)  {
+            this.fakeDisplayNames.remove(viewer);
+        } else {
+            this.fakeDisplayNames.put(viewer, name);
+        }
+    }
+
+    @Override
+    public String getName(CommandSender viewer) {
+        String name = this.getFakeName(viewer);
+        if(name == null) {
+            name = this.getName();
+        }
+        return name;
+    }
+
+    @Override
+    public String getPlayerListName(CommandSender viewer) {
+        String name = this.getFakeName(viewer);
+        if(name == null) {
+            name = this.getPlayerListName();
+        }
+        return name;
+    }
+
+    @Override
+    public String getOverheadName(CommandSender viewer) {
+        String name = this.getFakeName(viewer);
+        if(name == null) {
+            name = this.getOverheadName();
+        }
+        return name;
+    }
+
+    @Override
+    public String getDisplayName(CommandSender viewer) {
+        String name = this.getFakeDisplayName(viewer);
+        if(name == null) {
+            name = this.getDisplayName();
+        }
+        return name;
+    }
+
     public String getDisplayName() {
         return getHandle().displayName;
     }
@@ -181,12 +380,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         // Collisions will make for invisible people
-        for (int i = 0; i < server.getHandle().players.size(); ++i) {
-            EntityPlayer player = (EntityPlayer) server.getHandle().players.get(i);
-            if (player.listName.equals(name) && getHandle() != player) {
-                // throw new IllegalArgumentException(name + " is already assigned as a player list name for someone"); - Try and fix instead of erroring out
-                server.getHandle().disconnect(player);
-                break;
+        for(Player other : this.server.getOnlinePlayers()) {
+            if(name.equals(other.getPlayerListName())) {
+                throw new IllegalArgumentException(name + " is already used by another player");
+            }
+            if(!((CraftPlayer)other).fakeNames.isEmpty()) {
+                throw new IllegalArgumentException("Cannot set list name if any players have fake names");
             }
         }
 
@@ -962,6 +1161,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void disconnect(String reason) {
+        this.clearFakeNames();
         conversationTracker.abandonAllConversations();
         perm.clearPermissions();
     }
-- 
1.7.3.5


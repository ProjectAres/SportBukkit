From aea60442cb5638237782c7d82a48782246d02263 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 3 Dec 2016 23:46:01 -0500
Subject: [PATCH] Pause entity API


diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 29fa2e54..d33fc7ca 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -537,6 +537,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     protected void tickPotionEffects() {
+        if(!getBukkitEntity().isPaused()) { // SportBukkit - don't tick effects while paused
         Iterator<MobEffectList> iterator = com.google.common.collect.ImmutableSet.copyOf(this.effects.keySet()).iterator(); // SportBukkit - copy to allow concurrent modification
 
         while (iterator.hasNext()) {
@@ -565,6 +566,7 @@ public abstract class EntityLiving extends Entity {
                 this.a(mobeffect, false);
             }
         }
+        } // SportBukkit
 
         if (this.updateEffects) {
             if (!this.world.isClientSide) {
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 565ca7ae..573f153c 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -1289,6 +1289,19 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         CriterionTriggers.z.a(this);
     }
 
+    // SportBukkit start - refresh effects while paused to keep time in sync
+    @Override
+    protected void tickPotionEffects() {
+        if(getBukkitEntity().isPaused() && ticksLived % 10 == 0) {
+            for(MobEffect effect : this.getEffects()) {
+                this.playerConnection.sendPacket(new PacketPlayOutEntityEffect(this.getId(), effect));
+            }
+        }
+        super.tickPotionEffects();
+
+    }
+    // SportBukkit end
+
     public void enderTeleportTo(double d0, double d1, double d2) {
         this.playerConnection.a(d0, d1, d2, this.yaw, this.pitch);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index a27077c7..c96f414c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -46,6 +46,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     protected Entity entity;
     private EntityDamageEvent lastDamageEvent;
     private float knockbackReduction;
+    private boolean paused = false;
 
     public CraftEntity(final CraftServer server, final Entity entity) {
         this.server = server;
@@ -901,4 +902,14 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return Cuboid.between(ImVector.of(bb.a, bb.b, bb.c),
                               ImVector.of(bb.d, bb.e, bb.f));
     }
+
+    @Override
+    public void setPaused(boolean paused) {
+        this.paused = paused;
+    }
+
+    @Override
+    public boolean isPaused() {
+        return paused;
+    }
 }

From b541ccf0728f8caf22d8c7bbb2782fa494eb0d11 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Thu, 29 Dec 2016 23:23:45 -0500
Subject: [PATCH] Don't tick empty worlds


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index a9c9d714..3700b8b3 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -304,6 +304,16 @@ public class ChunkProviderServer implements IChunkProvider {
     }
     // CraftBukkit end
 
+    // SportBukkit start
+    public int unloadAllChunks(boolean save) {
+        int count = 0;
+        for(Chunk chunk : new ArrayList<>(chunks.values())) {
+            if(unloadChunk(chunk, save)) count++;
+        }
+        return count;
+    }
+    // SportBukkit end
+
     public boolean e() {
         return !this.world.savingDisabled;
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3ba6d2b6..6f155133 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -842,6 +842,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
             // if (i == 0 || this.getAllowNether()) {
                 WorldServer worldserver = this.worlds.get(i);
+            if(!worldserver.getWorld().checkTicking()) continue; // SportBukkit
 
                 this.methodProfiler.a(() -> {
                     return worldserver.getWorldData().getName();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index c2a9040c..e5c256b3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -564,6 +564,16 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     }
 
     @Override
+    public boolean getKeepSpawnInMemory() {
+        return this.configuration.getBoolean("settings.keep-spawn-loaded", true);
+    }
+
+    @Override
+    public boolean getTickEmptyWorlds() {
+        return this.configuration.getBoolean("settings.tick-empty-worlds", true);
+    }
+
+    @Override
     public boolean getAllowEnd() {
         return this.configuration.getBoolean("settings.allow-end");
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 1c8ef188..e17d1261 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -96,6 +96,40 @@ public class CraftWorld implements World {
         if (server.chunkGCPeriod > 0) {
             chunkGCTickCount = rand.nextInt(server.chunkGCPeriod);
         }
+
+        world.keepSpawnInMemory = world.getServer().getKeepSpawnInMemory();
+    }
+
+    private boolean ticking = false;
+
+    @Override
+    public boolean isTicking() {
+        return ticking;
+    }
+
+    public boolean checkTicking() {
+        if(ticking) {
+            if(!(hasPlayers() || server.getTickEmptyWorlds())) {
+                ticking = false;
+                world.getServer().getLogger().info("Stopping world " + getName());
+                unloadAllChunks();
+            }
+        } else if(hasPlayers()) {
+            ticking = true;
+            world.getServer().getLogger().info("Starting world " + getName());
+            setKeepSpawnInMemory(getKeepSpawnInMemory());
+        }
+        return ticking;
+    }
+
+    @Override
+    public int getPlayerCount() {
+        return getHandle().players.size();
+    }
+
+    @Override
+    public boolean hasPlayers() {
+        return getPlayerCount() > 0;
     }
 
     @Override
@@ -219,6 +253,11 @@ public class CraftWorld implements World {
         return world.getChunkProviderServer().unloadChunk(chunk, chunk.mustSave || save);
     }
 
+    @Override
+    public int unloadAllChunks() {
+        return getHandle().getChunkProviderServer().unloadAllChunks(true);
+    }
+
     public boolean regenerateChunk(int x, int z) {
         if (!unloadChunk0(x, z, false)) {
             return false;

From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 17 Jan 2017 07:10:14 -0500
Subject: [PATCH] SportBukkit


diff --git a/README.md b/README.md
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-CraftBukkit
+SportBukkit
 ======
 An implementation of the [Bukkit](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/bukkit) plugin API for [Minecraft](https://minecraft.net/) servers, currently maintained by [SpigotMC](http://www.spigotmc.org/).
 
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -221,6 +221,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
         String playerName = i.getName();
         java.net.InetAddress address = ((java.net.InetSocketAddress) networkManager.getSocketAddress()).getAddress();
         java.util.UUID uniqueId = i.getId();
+        networkManager.playerId = uniqueId;
         final org.bukkit.craftbukkit.CraftServer server = LoginListener.this.server.server;
         AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
 
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -71,8 +71,10 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     public SocketAddress l;
     public java.util.UUID spoofedUUID;
     public com.mojang.authlib.properties.Property[] spoofedProfile;
+
+    public int protocolVersion = Protocol.LATEST;
+    public java.util.UUID playerId;
     // SportBukkit End
-    public int protocolVersion = Protocol.LATEST; // SportBukkit
     private PacketListener m;
     private IChatBaseComponent n;
     private boolean o;
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -23,10 +23,14 @@ import javax.annotation.Nullable;
 
 import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
 import org.bukkit.craftbukkit.protocol.Protocol; // SportBukkit
+import org.bukkit.craftbukkit.protocol.RenderableComponent;
 
 public class PacketDataSerializer extends ByteBuf {
 
-    public int protocolVersion = Protocol.LATEST; // SportBukkit
+    // SportBukkit start
+    public int protocolVersion = Protocol.LATEST;
+    public UUID playerId;
+    // SportBukkit end
 
     private final ByteBuf a;
 
@@ -131,6 +135,12 @@ public class PacketDataSerializer extends ByteBuf {
 
     public PacketDataSerializer writeChatComponent(IChatBaseComponent chat) { return a(chat); } // SportBukkit - alias
     public PacketDataSerializer a(IChatBaseComponent ichatbasecomponent) {
+        // SportBukkit start
+        if(ichatbasecomponent instanceof RenderableComponent) {
+            ((RenderableComponent) ichatbasecomponent).serialize(this);
+            return this;
+        } else
+        // SportBukkit end
         return this.a(IChatBaseComponent.ChatSerializer.a(ichatbasecomponent));
     }
 
diff --git a/src/main/java/net/minecraft/server/PacketEncoder.java b/src/main/java/net/minecraft/server/PacketEncoder.java
--- a/src/main/java/net/minecraft/server/PacketEncoder.java
+++ b/src/main/java/net/minecraft/server/PacketEncoder.java
@@ -33,7 +33,10 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
             throw new IOException("Can\'t serialize unregistered packet");
         } else {
             PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
-            packetdataserializer.protocolVersion = networkManager.protocolVersion; // SportBukkit - set proto
+            // SportBukkit start
+            packetdataserializer.protocolVersion = networkManager.protocolVersion;
+            packetdataserializer.playerId = networkManager.playerId;
+            // SportBukkit end
 
             packetdataserializer.d(integer.intValue());
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutBoss.java b/src/main/java/net/minecraft/server/PacketPlayOutBoss.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutBoss.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutBoss.java
@@ -3,7 +3,18 @@ package net.minecraft.server;
 import java.io.IOException;
 import java.util.UUID;
 
-public class PacketPlayOutBoss implements Packet<PacketListenerPlayOut> {
+// SportBukkit start
+import org.bukkit.craftbukkit.protocol.RenderableComponent;
+import org.bukkit.craftbukkit.protocol.Renderable;
+import org.bukkit.entity.Player;
+
+public class PacketPlayOutBoss implements Packet<PacketListenerPlayOut>, Renderable {
+
+    @Override
+    public void render(Player viewer) {
+        RenderableComponent.render(c, viewer);
+    }
+    // SportBukkit end
 
     private UUID a;
     private PacketPlayOutBoss.Action b;
@@ -20,7 +31,7 @@ public class PacketPlayOutBoss implements Packet<PacketListenerPlayOut> {
     public PacketPlayOutBoss(PacketPlayOutBoss.Action packetplayoutboss_action, BossBattle bossbattle) {
         this.b = packetplayoutboss_action;
         this.a = bossbattle.d();
-        this.c = bossbattle.e();
+        this.c = RenderableComponent.wrap(bossbattle.e()); // SportBukkit
         this.d = bossbattle.getProgress();
         this.e = bossbattle.g();
         this.f = bossbattle.h();
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutChat.java b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutChat.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
@@ -2,10 +2,46 @@ package net.minecraft.server;
 
 import java.io.IOException;
 
-public class PacketPlayOutChat implements Packet<PacketListenerPlayOut> {
+// SportBukkit start
+import net.md_5.bungee.api.ChatMessageType;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TextComponent;
+import org.bukkit.craftbukkit.protocol.RenderableComponent;
+import org.bukkit.craftbukkit.protocol.Renderable;
+import org.bukkit.craftbukkit.util.BungeeChatUtils;
+import org.bukkit.entity.Player;
+
+public class PacketPlayOutChat implements Packet<PacketListenerPlayOut>, Renderable {
+
+    private class RenderableChatComponent extends RenderableComponent {
+
+        public RenderableChatComponent(BaseComponent bukkit) {
+            super(bukkit);
+        }
+
+        @Override
+        protected BaseComponent afterRender(BaseComponent text) {
+            if(b == ChatMessageType.ACTION_BAR.ordinal()) {
+                // Work around a client bug where component text above the hotbar is not formatted.
+                // The only way to format it is by wrapping legacy formatting in a text component.
+                text = new TextComponent(TextComponent.toLegacyText(text));
+            }
+            return text;
+        }
+    }
+
+    @Override
+    public void render(Player viewer) {
+        ((RenderableComponent) a).render(viewer);
+    }
+
+    public PacketPlayOutChat(BaseComponent text, ChatMessageType position) {
+        this.a = new RenderableChatComponent(text);
+        this.b = (byte) position.ordinal();
+    }
+    // SportBukkit end
 
     private IChatBaseComponent a;
-    public net.md_5.bungee.api.chat.BaseComponent[] components; // Spigot
     private byte b;
 
     public PacketPlayOutChat() {}
@@ -15,7 +51,7 @@ public class PacketPlayOutChat implements Packet<PacketListenerPlayOut> {
     }
 
     public PacketPlayOutChat(IChatBaseComponent ichatbasecomponent, byte b0) {
-        this.a = ichatbasecomponent;
+        this.a = new RenderableChatComponent(BungeeChatUtils.toBungee(ichatbasecomponent)); // SportBukkit
         this.b = b0;
     }
 
@@ -25,13 +61,7 @@ public class PacketPlayOutChat implements Packet<PacketListenerPlayOut> {
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        // Spigot start
-        if (components != null) {
-            packetdataserializer.a(net.md_5.bungee.chat.ComponentSerializer.toString(components));
-        } else {
-            packetdataserializer.a(this.a);
-        }
-        // Spigot end
+        packetdataserializer.a(this.a);
         packetdataserializer.writeByte(this.b);
     }
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutCombatEvent.java b/src/main/java/net/minecraft/server/PacketPlayOutCombatEvent.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutCombatEvent.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutCombatEvent.java
@@ -2,7 +2,20 @@ package net.minecraft.server;
 
 import java.io.IOException;
 
-public class PacketPlayOutCombatEvent implements Packet<PacketListenerPlayOut> {
+// SportBukkit start
+import org.bukkit.craftbukkit.protocol.RenderableComponent;
+import org.bukkit.craftbukkit.protocol.Renderable;
+import org.bukkit.entity.Player;
+
+public class PacketPlayOutCombatEvent implements Packet<PacketListenerPlayOut>, Renderable {
+
+    @Override
+    public void render(Player viewer) {
+        if(a == EnumCombatEventType.ENTITY_DIED) {
+            RenderableComponent.render(e, viewer);
+        }
+    }
+    // SportBukkit end
 
     public PacketPlayOutCombatEvent.EnumCombatEventType a;
     public int b;
@@ -30,7 +43,7 @@ public class PacketPlayOutCombatEvent implements Packet<PacketListenerPlayOut> {
             this.b = combattracker.h().getId();
             this.c = entityliving == null ? -1 : entityliving.getId();
             if (flag) {
-                this.e = combattracker.getDeathMessage();
+                this.e = RenderableComponent.wrap(combattracker.getDeathMessage()); // SportBukkit
             } else {
                 this.e = new ChatComponentText("");
             }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -9,12 +9,24 @@ import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 
-public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
-
-    private PacketPlayOutPlayerInfo.EnumPlayerInfoAction a;
-    private final List<PacketPlayOutPlayerInfo.PlayerInfoData> b = Lists.newArrayList();
+// SportBukkit start
+import java.util.UUID;
+
+import net.md_5.bungee.api.chat.BaseComponent;
+import org.bukkit.GameMode;
+import org.bukkit.Skin;
+import org.bukkit.craftbukkit.protocol.RenderableComponent;
+import org.bukkit.craftbukkit.protocol.Renderable;
+import org.bukkit.craftbukkit.util.Skins;
+import org.bukkit.entity.Player;
+
+public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut>, Renderable {
+
+    @Override
+    public void render(Player viewer) {
+        b.forEach(info -> RenderableComponent.render(info.e, viewer));
+    }
 
-    // SportBukkit start - add constructor
     public PacketPlayOutPlayerInfo(EnumPlayerInfoAction a) {
         this.a = a;
     }
@@ -28,6 +40,9 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
     }
     // SportBukkit end
 
+    private PacketPlayOutPlayerInfo.EnumPlayerInfoAction a;
+    private final List<PacketPlayOutPlayerInfo.PlayerInfoData> b = Lists.newArrayList();
+
     public PacketPlayOutPlayerInfo() {}
 
     public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, EntityPlayer... aentityplayer) {
@@ -144,15 +159,6 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
 
                 packetdataserializer.d(packetplayoutplayerinfo_playerinfodata.c().getId());
                 packetdataserializer.d(packetplayoutplayerinfo_playerinfodata.b());
-
-                // SportBukkit start
-                if (packetplayoutplayerinfo_playerinfodata.displayName != null) {
-                    packetdataserializer.writeBoolean(true);
-                    packetdataserializer.a(net.md_5.bungee.chat.ComponentSerializer.toString(packetplayoutplayerinfo_playerinfodata.displayName));
-                    break;
-                }
-                // SportBukkit end
-
                 if (packetplayoutplayerinfo_playerinfodata.d() == null) {
                     packetdataserializer.writeBoolean(false);
                 } else {
@@ -173,15 +179,6 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
 
             case UPDATE_DISPLAY_NAME:
                 packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
-
-                // SportBukkit start
-                if (packetplayoutplayerinfo_playerinfodata.displayName != null) {
-                    packetdataserializer.writeBoolean(true);
-                    packetdataserializer.a(net.md_5.bungee.chat.ComponentSerializer.toString(packetplayoutplayerinfo_playerinfodata.displayName));
-                    break;
-                }
-                // SportBukkit end
-
                 if (packetplayoutplayerinfo_playerinfodata.d() == null) {
                     packetdataserializer.writeBoolean(false);
                 } else {
@@ -207,7 +204,20 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
 
     public class PlayerInfoData {
 
-        public net.md_5.bungee.api.chat.BaseComponent[] displayName; // SportBukkit
+        // SportBukkit start
+        public PlayerInfoData(UUID uuid, String name, @Nullable BaseComponent displayName, GameMode gamemode, int ping, @Nullable Skin skin) {
+            this(new GameProfile(uuid, name),
+                 ping,
+                 EnumGamemode.getById(gamemode.getValue()),
+                 displayName == null ? null : new RenderableComponent(displayName));
+
+            if(skin != null) {
+                Skins.toProperties(skin).asMap().forEach(
+                    (k, v) -> d.getProperties().putAll(k, v)
+                );
+            }
+        }
+        // SportBukkit end
 
         private final int b;
         private final EnumGamemode c;
@@ -218,7 +228,7 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
             this.d = gameprofile;
             this.b = i;
             this.c = enumgamemode;
-            this.e = ichatbasecomponent;
+            this.e = RenderableComponent.wrap(ichatbasecomponent); // SportBukkit
         }
 
         public GameProfile a() {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java
@@ -2,9 +2,25 @@ package net.minecraft.server;
 
 import java.io.IOException;
 
-public class PacketPlayOutPlayerListHeaderFooter implements Packet<PacketListenerPlayOut> {
+// SportBukkit start
+import net.md_5.bungee.api.chat.BaseComponent;
+import org.bukkit.craftbukkit.protocol.RenderableComponent;
+import org.bukkit.craftbukkit.protocol.Renderable;
+import org.bukkit.entity.Player;
+
+public class PacketPlayOutPlayerListHeaderFooter implements Packet<PacketListenerPlayOut>, Renderable {
+
+    @Override
+    public void render(Player viewer) {
+        RenderableComponent.render(a, viewer);
+        RenderableComponent.render(b, viewer);
+    }
 
-    public net.md_5.bungee.api.chat.BaseComponent[] header, footer; // SportBukkit
+    public PacketPlayOutPlayerListHeaderFooter(BaseComponent header, BaseComponent footer) {
+        a = new RenderableComponent(header);
+        b = new RenderableComponent(footer);
+    }
+    // SportBukkit end
 
     private IChatBaseComponent a;
     private IChatBaseComponent b;
@@ -21,19 +37,8 @@ public class PacketPlayOutPlayerListHeaderFooter implements Packet<PacketListene
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        // SportBukkit start
-        if(this.header != null) {
-            packetdataserializer.a(net.md_5.bungee.chat.ComponentSerializer.toString(this.header));
-        } else {
-            packetdataserializer.a(this.a);
-        }
-
-        if(this.footer != null) {
-            packetdataserializer.a(net.md_5.bungee.chat.ComponentSerializer.toString(this.footer));
-        } else {
-            packetdataserializer.a(this.b);
-        }
-        // SportBukkit end
+        packetdataserializer.a(this.a);
+        packetdataserializer.a(this.b);
     }
 
     public void a(PacketListenerPlayOut packetlistenerplayout) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
@@ -4,7 +4,23 @@ import java.io.IOException;
 import java.util.Locale;
 import javax.annotation.Nullable;
 
-public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
+// SportBukkit start
+import net.md_5.bungee.api.chat.BaseComponent;
+import org.bukkit.craftbukkit.protocol.RenderableComponent;
+import org.bukkit.craftbukkit.protocol.Renderable;
+import org.bukkit.entity.Player;
+
+public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut>, Renderable {
+
+    @Override
+    public void render(Player viewer) {
+        RenderableComponent.render(b, viewer);
+    }
+
+    public PacketPlayOutTitle(EnumTitleAction action, @Nullable BaseComponent text, int fadeIn, int stay, int fadeOut) {
+        this(action, text == null ? null : new RenderableComponent(text), fadeIn, stay, fadeOut);
+    }
+    // SportBukkit end
 
     private PacketPlayOutTitle.EnumTitleAction a;
     private IChatBaseComponent b;
@@ -12,18 +28,6 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
     private int d;
     private int e;
 
-    // SportBukkit start
-    public net.md_5.bungee.api.chat.BaseComponent[] components;
-
-    public PacketPlayOutTitle(EnumTitleAction action, net.md_5.bungee.api.chat.BaseComponent[] components, int fadeIn, int stay, int fadeOut) {
-        this.a = action;
-        this.components = components;
-        this.c = fadeIn;
-        this.d = stay;
-        this.e = fadeOut;
-    }
-    // SportBukkit end
-
     public PacketPlayOutTitle() {}
 
     public PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction packetplayouttitle_enumtitleaction, IChatBaseComponent ichatbasecomponent) {
@@ -36,7 +40,7 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
 
     public PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction packetplayouttitle_enumtitleaction, @Nullable IChatBaseComponent ichatbasecomponent, int i, int j, int k) {
         this.a = packetplayouttitle_enumtitleaction;
-        this.b = ichatbasecomponent;
+        this.b = RenderableComponent.wrap(ichatbasecomponent); // SportBukkit
         this.c = i;
         this.d = j;
         this.e = k;
@@ -66,13 +70,7 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
         }
         // SportBukkit end
         if (this.a == PacketPlayOutTitle.EnumTitleAction.TITLE || this.a == PacketPlayOutTitle.EnumTitleAction.SUBTITLE || this.a == PacketPlayOutTitle.EnumTitleAction.ACTIONBAR) {
-            // SportBukkit start
-            if(this.components != null) {
-                packetdataserializer.a(net.md_5.bungee.chat.ComponentSerializer.toString(components));
-            } else {
-                packetdataserializer.a(this.b);
-            }
-            // SportBukkit end
+            packetdataserializer.a(this.b);
         }
 
         if (this.a == PacketPlayOutTitle.EnumTitleAction.TIMES) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -3,7 +3,6 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
-import com.google.common.util.concurrent.Futures;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.io.IOException;
@@ -31,6 +30,7 @@ import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.protocol.Renderable;
 import org.bukkit.craftbukkit.util.BungeeChatUtils;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.LazyPlayerSet;
@@ -1260,6 +1260,10 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     }
                 }
             }
+
+        }
+        if(packet instanceof Renderable) {
+            ((Renderable) packet).render(getPlayer());
         }
         // CraftBukkit end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -24,6 +24,7 @@ import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import javax.inject.Provider;
 
 import com.google.common.collect.Maps;
 import com.google.inject.Guice;
@@ -145,6 +146,8 @@ import org.bukkit.event.server.TabCompleteEvent;
 import net.md_5.bungee.api.chat.BaseComponent;
 import tc.oc.minecraft.api.configuration.InvalidConfigurationException;
 import tc.oc.minecraft.api.plugin.PluginFinder;
+import tc.oc.minecraft.api.text.TextRenderContext;
+import tc.oc.minecraft.api.text.TextRenderer;
 
 public final class CraftServer extends CraftBukkitRuntime implements Server {
     private static final Player[] EMPTY_PLAYER_ARRAY = new Player[0];
@@ -2000,4 +2003,23 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
             }
         }
     }
+
+    @Override
+    public TextRenderContext textRenderContext() {
+        return textRenderContext;
+    }
+
+    private final TextRenderContext textRenderContext = new TextRenderContext() {
+        @Override
+        public BaseComponent render(BaseComponent text, tc.oc.minecraft.api.command.CommandSender viewer) {
+            for(Plugin plugin : getPluginManager().getPlugins()) {
+                if(plugin.isEnabled()) {
+                    for(Provider<TextRenderer> renderer : plugin.textRenderers()) {
+                        text = renderer.get().render(this, text, viewer);
+                    }
+                }
+            }
+            return text;
+        }
+    };
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1898,76 +1898,60 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent... message) {
+    public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent message) {
         if ( getHandle().playerConnection == null ) return;
-
-        PacketPlayOutChat packet = new PacketPlayOutChat(null, (byte) position.ordinal());
-        if(position == ChatMessageType.ACTION_BAR) {
-            // Work around a client bug where component text above the hotbar is not formatted.
-            // The only way to format it is by wrapping legacy formatting in a text component.
-            packet.components = new BaseComponent[]{ new TextComponent(TextComponent.toLegacyText(message)) };
-        } else {
-            packet.components = message;
-        }
-        getHandle().playerConnection.sendPacket(packet);
+        getHandle().playerConnection.sendPacket(new PacketPlayOutChat(message, position));
     }
 
     @Override
-    public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent message) {
-        sendMessage(position, new BaseComponent[] {message});
+    public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent... messages) {
+        sendMessage(position, new TextComponent(messages));
     }
 
     @Override
     public void sendMessage(BaseComponent component) {
-      sendMessage( new BaseComponent[] { component } );
+      sendMessage(ChatMessageType.CHAT, component);
     }
 
     @Override
     public void sendMessage(BaseComponent... components) {
-       if ( getHandle().playerConnection == null ) return;
-
-        PacketPlayOutChat packet = new PacketPlayOutChat();
-        packet.components = components;
-        getHandle().playerConnection.sendPacket(packet);
+        sendMessage(ChatMessageType.CHAT, components);
     }
 
     @Override
-    public void setPlayerListHeaderFooter(BaseComponent[] header, BaseComponent[] footer) {
-        PacketPlayOutPlayerListHeaderFooter packet = new PacketPlayOutPlayerListHeaderFooter();
-        packet.header = header;
-        packet.footer = footer;
-        getHandle().playerConnection.sendPacket(packet);
+    public void setPlayerListHeaderFooter(BaseComponent header, BaseComponent footer) {
+        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerListHeaderFooter(header, footer));
     }
 
     @Override
-    public void setPlayerListHeaderFooter(BaseComponent header, BaseComponent footer) {
-        this.setPlayerListHeaderFooter(header == null ? null : new BaseComponent[]{ header },
-                                       footer == null ? null : new BaseComponent[]{ footer });
+    public void setPlayerListHeaderFooter(BaseComponent[] header, BaseComponent[] footer) {
+        this.setPlayerListHeaderFooter(header == null ? null : new TextComponent(header),
+                                       footer == null ? null : new TextComponent(footer));
     }
 
     @Override
     public void setTitleTimes(int fadeInTicks, int stayTicks, int fadeOutTicks) {
-        getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.TIMES, (BaseComponent[]) null, fadeInTicks, stayTicks, fadeOutTicks));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.TIMES, (BaseComponent) null, fadeInTicks, stayTicks, fadeOutTicks));
     }
 
     @Override
     public void setSubtitle(BaseComponent[] subtitle) {
-        getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.SUBTITLE, subtitle, 0, 0, 0));
+        setSubtitle(new TextComponent(subtitle));
     }
 
     @Override
     public void setSubtitle(BaseComponent subtitle) {
-        setSubtitle(new BaseComponent[] { subtitle });
+        getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.SUBTITLE, subtitle, 0, 0, 0));
     }
 
     @Override
     public void showTitle(BaseComponent[] title) {
-        getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.TITLE, title, 0, 0, 0));
+        showTitle(new TextComponent(title));
     }
 
     @Override
     public void showTitle(BaseComponent title) {
-        showTitle(new BaseComponent[] {title});
+        getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.TITLE, title, 0, 0, 0));
     }
 
     @Override
@@ -1986,7 +1970,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void hideTitle() {
-        getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.CLEAR, (BaseComponent[]) null, 0, 0, 0));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.CLEAR, (BaseComponent) null, 0, 0, 0));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/protocol/Renderable.java b/src/main/java/org/bukkit/craftbukkit/protocol/Renderable.java
new file mode 100644
index 0000000..875671a
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/protocol/Renderable.java
@@ -0,0 +1,8 @@
+package org.bukkit.craftbukkit.protocol;
+
+import org.bukkit.entity.Player;
+
+public interface Renderable {
+
+    void render(Player viewer);
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/protocol/RenderableComponent.java b/src/main/java/org/bukkit/craftbukkit/protocol/RenderableComponent.java
new file mode 100644
index 0000000..3018396
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/protocol/RenderableComponent.java
@@ -0,0 +1,69 @@
+package org.bukkit.craftbukkit.protocol;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+import javax.annotation.Nullable;
+
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+import net.minecraft.server.ChatBaseComponent;
+import net.minecraft.server.IChatBaseComponent;
+import net.minecraft.server.PacketDataSerializer;
+import org.bukkit.craftbukkit.util.BungeeChatUtils;
+import org.bukkit.entity.Player;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+public class RenderableComponent extends ChatBaseComponent {
+
+    private final BaseComponent original;
+    private final Map<UUID, BaseComponent> rendered = new HashMap<>();
+
+    public static @Nullable RenderableComponent wrap(@Nullable IChatBaseComponent nms) {
+        if(nms == null) return null;
+        if(nms instanceof RenderableComponent) {
+            return (RenderableComponent) nms;
+        }
+        return new RenderableComponent(BungeeChatUtils.toBungee(nms));
+    }
+
+    public static void render(@Nullable IChatBaseComponent nms, Player viewer) {
+        if(nms instanceof RenderableComponent) {
+            ((RenderableComponent) nms).render(viewer);
+        }
+    }
+
+    public RenderableComponent(BaseComponent bukkit) {
+        this.original = checkNotNull(bukkit);
+    }
+
+    protected BaseComponent afterRender(BaseComponent text) {
+        return text;
+    }
+
+    public void render(Player viewer) {
+        rendered.computeIfAbsent(
+            viewer.getUniqueId(),
+            uuid -> afterRender(
+                viewer.getServer()
+                      .textRenderContext()
+                      .render(original, viewer)
+            )
+        );
+    }
+
+    public void serialize(PacketDataSerializer data) {
+        data.a(ComponentSerializer.toString(rendered.getOrDefault(data.playerId, original)));
+    }
+
+    @Override
+    public String getText() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public IChatBaseComponent f() {
+        throw new UnsupportedOperationException();
+    }
+}

From 826991c2ded290637e21b52e78230c5a0fb11446 Mon Sep 17 00:00:00 2001
From: mrapple <tony@oc.tc>
Date: Wed, 29 May 2013 23:59:07 -0500
Subject: [PATCH] Visibility API


diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 01098f5..b049ebe 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -359,11 +359,8 @@ public class EntityTrackerEntry {
             if (d0 >= (double) (-this.b) && d0 <= (double) this.b && d1 >= (double) (-this.b) && d1 <= (double) this.b) {
                 if (!this.trackedPlayers.contains(entityplayer) && (this.d(entityplayer) || this.tracker.o)) {
                     // CraftBukkit start
-                    if (this.tracker instanceof EntityPlayer) {
-                        Player player = ((EntityPlayer) this.tracker).getBukkitEntity();
-                        if (!entityplayer.getBukkitEntity().canSee(player)) {
-                            return;
-                        }
+                    if (!entityplayer.getBukkitEntity().canSee(this.tracker.getBukkitEntity())) {
+                        return;
                     }
 
                     // entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.getId())); CraftBukkit - remove destroy queue
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index a1f620d..9e7fb99 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -1003,20 +1003,21 @@ public abstract class PlayerList {
     }
 
     public void sendPacketNearby(double d0, double d1, double d2, double d3, int i, Packet packet) {
-        this.sendPacketNearby((EntityHuman) null, d0, d1, d2, d3, i, packet);
+        this.sendPacketNearby((Entity) null, d0, d1, d2, d3, i, packet); // CraftBukkit - EntityHuman -> Entity
     }
 
-    public void sendPacketNearby(EntityHuman entityhuman, double d0, double d1, double d2, double d3, int i, Packet packet) {
+     // CraftBukkit - EntityHuman -> Entity
+    public void sendPacketNearby(Entity entity, double d0, double d1, double d2, double d3, int i, Packet packet) {
         for (int j = 0; j < this.players.size(); ++j) {
             EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
 
             // CraftBukkit start - Test if player receiving packet can see the source of the packet
-            if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
+            if (entity != null && !entityplayer.getBukkitEntity().canSee(entity.getBukkitEntity())) {
                 continue;
             }
-            // CraftBukkit end
 
-            if (entityplayer != entityhuman && entityplayer.dimension == i) {
+            if (entityplayer != entity && entityplayer.dimension == i) {
+                // CraftBukkit end
                 double d4 = d0 - entityplayer.locX;
                 double d5 = d1 - entityplayer.locY;
                 double d6 = d2 - entityplayer.locZ;
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 9da48a3..f8ab2a5 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -831,7 +831,7 @@ public abstract class World implements IBlockAccess {
 
     public void makeSound(Entity entity, String s, float f, float f1) {
         for (int i = 0; i < this.u.size(); ++i) {
-            ((IWorldAccess) this.u.get(i)).a(s, entity.locX, entity.locY - (double) entity.height, entity.locZ, f, f1);
+            ((WorldManager) this.u.get(i)).a(s, entity.locX, entity.locY - (double) entity.height, entity.locZ, f, f1, entity); // CraftBukkit - cast to WorldManager and add source entity
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/WorldManager.java b/src/main/java/net/minecraft/server/WorldManager.java
index b349902..6863299 100644
--- a/src/main/java/net/minecraft/server/WorldManager.java
+++ b/src/main/java/net/minecraft/server/WorldManager.java
@@ -22,9 +22,15 @@ public class WorldManager implements IWorldAccess {
         this.world.getTracker().untrackEntity(entity);
     }
 
+    // CraftBukkit start - add source entity
     public void a(String s, double d0, double d1, double d2, float f, float f1) {
+        this.a(s, d0, d1, d2, f, f1, (Entity) null);
+    }
+
+    public void a(String s, double d0, double d1, double d2, float f, float f1, Entity entity) {
         // CraftBukkit - this.world.dimension
-        this.server.getPlayerList().sendPacketNearby(d0, d1, d2, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.world.dimension, new PacketPlayOutNamedSoundEffect(s, d0, d1, d2, f, f1));
+        this.server.getPlayerList().sendPacketNearby((entity instanceof EntityPlayer ? null : entity), d0, d1, d2, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.world.dimension, new PacketPlayOutNamedSoundEffect(s, d0, d1, d2, f, f1));
+        // CraftBukkit end
     }
 
     public void a(EntityHuman entityhuman, String s, double d0, double d1, double d2, float f, float f1) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 03f9dbf..d26faa0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -13,6 +13,7 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.UUID;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -44,6 +45,7 @@ import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerGameModeChangeEvent;
 import org.bukkit.event.player.PlayerRegisterChannelEvent;
@@ -65,7 +67,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private boolean hasPlayedBefore = false;
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
-    private final Map<String, Player> hiddenPlayers = new MapMaker().softValues().makeMap();
+    private final Map<UUID, Entity> hiddenEntities = new MapMaker().softValues().makeMap();
     private final Set<PotionEffectType> ignorantEffects = new HashSet<PotionEffectType>();
     private int hash = 0;
     private double health = 20;
@@ -885,43 +887,59 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void hidePlayer(Player player) {
-        Validate.notNull(player, "hidden player cannot be null");
+        this.hide(player);
+    }
+
+    public void hide(Entity entity) {
+        Validate.notNull(entity, "hidden entity cannot be null");
         if (getHandle().playerConnection == null) return;
-        if (equals(player)) return;
-        if (hiddenPlayers.containsKey(player.getName())) return;
-        hiddenPlayers.put(player.getName(), player);
+        if (equals(entity)) return;
+        if (!canSee(entity)) return;
+        hiddenEntities.put(entity.getUniqueId(), entity);
 
         //remove this player from the hidden player's EntityTrackerEntry
-        EntityTracker tracker = ((WorldServer) entity.world).tracker;
-        EntityPlayer other = ((CraftPlayer) player).getHandle();
+        EntityTracker tracker = ((WorldServer) this.entity.world).tracker;
+        net.minecraft.server.Entity other = ((CraftEntity) entity).getHandle();
         EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.getId());
         if (entry != null) {
             entry.clear(getHandle());
         }
 
         //remove the hidden player from this player user list
-        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(player.getPlayerListName(), false, 9999));
+        if(other instanceof EntityPlayer) {
+            getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(((CraftPlayer) entity).getPlayerListName(), false, 9999));
+        }
     }
 
     public void showPlayer(Player player) {
-        Validate.notNull(player, "shown player cannot be null");
+        this.show(player);
+    }
+
+    public void show(Entity entity) {
+        Validate.notNull(entity, "shown entity cannot be null");
         if (getHandle().playerConnection == null) return;
-        if (equals(player)) return;
-        if (!hiddenPlayers.containsKey(player.getName())) return;
-        hiddenPlayers.remove(player.getName());
+        if (equals(entity)) return;
+        if (canSee(entity)) return;
+        hiddenEntities.remove(entity.getUniqueId());
 
-        EntityTracker tracker = ((WorldServer) entity.world).tracker;
-        EntityPlayer other = ((CraftPlayer) player).getHandle();
+        EntityTracker tracker = ((WorldServer) this.entity.world).tracker;
+        net.minecraft.server.Entity other = ((CraftEntity) entity).getHandle();
         EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.getId());
         if (entry != null && !entry.trackedPlayers.contains(getHandle())) {
             entry.updatePlayer(getHandle());
         }
 
-        getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(player.getPlayerListName(), true, getHandle().ping));
+        if(other instanceof EntityPlayer) {
+            getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(player.getPlayerListName(), true, getHandle().ping));
+        }
+    }
+
+    public boolean canSee(Entity entity) {
+        return !hiddenEntities.containsKey(entity.getUniqueId());
     }
 
     public boolean canSee(Player player) {
-        return !hiddenPlayers.containsKey(player.getName());
+        return canSee((Entity) player);
     }
 
     public Map<String, Object> serialize() {
-- 
1.8.5.1


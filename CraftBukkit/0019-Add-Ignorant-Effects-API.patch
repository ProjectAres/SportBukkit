From 0d7137121c8a737f64cedc9c50c100c235daab4d Mon Sep 17 00:00:00 2001
From: mrapple <tony@oc.tc>
Date: Thu, 16 May 2013 20:20:34 -0500
Subject: [PATCH] Add Ignorant Effects API


diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index c630b38..84c8f32 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -16,7 +16,7 @@ public class DataWatcher {
     private boolean b = true;
     private static final HashMap c = new HashMap();
     private final Map d = new HashMap();
-    private boolean e;
+    public boolean e; // CraftBukkit - private -> public
     private ReadWriteLock f = new ReentrantReadWriteLock();
 
     public DataWatcher(Entity entity) {
@@ -75,7 +75,8 @@ public class DataWatcher {
         return (ItemStack) this.i(i).b();
     }
 
-    private WatchableObject i(int i) {
+    // CraftBukkit - private -> public
+    public WatchableObject i(int i) {
         this.f.readLock().lock();
 
         WatchableObject watchableobject;
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index caf7d03..7e01aa3 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -863,12 +863,18 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     protected void a(MobEffect mobeffect) {
         super.a(mobeffect);
-        this.playerConnection.sendPacket(new PacketPlayOutEntityEffect(this.getId(), mobeffect));
+        // CraftBukkit - account for ignorant effects
+        if (!this.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(mobeffect.getEffectId()))) {
+            this.playerConnection.sendPacket(new PacketPlayOutEntityEffect(this.getId(), mobeffect));
+        }
     }
 
     protected void a(MobEffect mobeffect, boolean flag) {
         super.a(mobeffect, flag);
-        this.playerConnection.sendPacket(new PacketPlayOutEntityEffect(this.getId(), mobeffect));
+        // CraftBukkit - account for ignorant effects
+        if (!this.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(mobeffect.getEffectId()))) {
+            this.playerConnection.sendPacket(new PacketPlayOutEntityEffect(this.getId(), mobeffect));
+        }
     }
 
     protected void b(MobEffect mobeffect) {
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 9f818cf..748417d 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import java.util.ArrayList; // CraftBukkit
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -99,7 +100,7 @@ public class EntityTrackerEntry {
                 }
             }
 
-            this.b();
+            this.sendMetadata(this.tracker.getDataWatcher(), false); // CraftBukkit - custom metadata sender
         } else if (this.m % this.c == 0 || this.tracker.am || this.tracker.getDataWatcher().a()) {
             int i;
             int j;
@@ -170,7 +171,7 @@ public class EntityTrackerEntry {
                     this.broadcast((Packet) object);
                 }
 
-                this.b();
+                this.sendMetadata(this.tracker.getDataWatcher(), false); // CraftBukkit - custom metadata sender
                 /* CraftBukkit start - Code moved up
                 if (flag) {
                     this.xLoc = i;
@@ -199,8 +200,9 @@ public class EntityTrackerEntry {
                 this.xLoc = this.tracker.at.a(this.tracker.locX);
                 this.yLoc = MathHelper.floor(this.tracker.locY * 32.0D);
                 this.zLoc = this.tracker.at.a(this.tracker.locZ);
-                this.b();
+                this.sendMetadata(this.tracker.getDataWatcher(), false); // CraftBukkit - custom metadata sender
                 this.x = true;
+                this.w = true;
             }
 
             i = MathHelper.d(this.tracker.getHeadRotation() * 256.0F / 360.0F);
@@ -281,6 +283,64 @@ public class EntityTrackerEntry {
         }
     }
 
+    // CraftBukkit start - custom metadata sender
+    public void sendMetadata(DataWatcher datawatcher, boolean flag) {
+        if (datawatcher.a()) {
+            this.sendMetadata(datawatcher, flag, null);
+        }
+
+        if (!flag && this.tracker instanceof EntityLiving) {
+            AttributeMapServer attributemapserver = (AttributeMapServer) ((EntityLiving) this.tracker).bc();
+            Set set = attributemapserver.b();
+
+            if (!set.isEmpty()) {
+                this.broadcastIncludingSelf(new PacketPlayOutUpdateAttributes(this.tracker.getId(), set));
+            }
+
+            set.clear();
+        }
+    }
+
+    public void sendMetadata(DataWatcher datawatcher, boolean flag, EntityPlayer entityplayer) {
+        List dataNormal = flag ? datawatcher.c() : datawatcher.b();
+        List dataVisible = new ArrayList(dataNormal);
+
+        if(this.tracker.isInvisible()) {
+            WatchableObject normal = datawatcher.i(0);
+            byte b0 = ((Byte) normal.b()).byteValue();
+            WatchableObject visible = new WatchableObject(normal.c(), normal.a(), Byte.valueOf((byte) (b0 & ~(1 << 5))));
+
+            dataVisible.remove(normal);
+            dataVisible.add(visible);
+        }
+
+        PacketPlayOutEntityMetadata normal = new PacketPlayOutEntityMetadata(this.tracker.getId(), dataNormal);
+        PacketPlayOutEntityMetadata visible = new PacketPlayOutEntityMetadata(this.tracker.getId(), dataVisible);
+        Iterator iterator = this.trackedPlayers.iterator();
+
+        if(entityplayer == null) {
+            while (iterator.hasNext()) {
+                EntityPlayer entityplayer2 = (EntityPlayer) iterator.next();
+                this.sendMetadata(entityplayer2, normal, visible);
+            }
+        }
+
+        if (entityplayer == null && this.tracker instanceof EntityPlayer) {
+            this.sendMetadata((EntityPlayer) this.tracker, normal, visible);
+        } else if (entityplayer != null) {
+            this.sendMetadata(entityplayer, normal, visible);
+        }
+    }
+
+    private void sendMetadata(EntityPlayer entityplayer, PacketPlayOutEntityMetadata normal, PacketPlayOutEntityMetadata visible) {
+        if (entityplayer.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(MobEffectList.INVISIBILITY.getId()))) {
+            entityplayer.playerConnection.sendPacket(visible);
+        } else {
+            entityplayer.playerConnection.sendPacket(normal);
+        }
+    }
+    // CraftBukkit end
+
     public void a() {
         Iterator iterator = this.trackedPlayers.iterator();
 
@@ -321,7 +381,7 @@ public class EntityTrackerEntry {
 
                     entityplayer.playerConnection.sendPacket(packet);
                     if (!this.tracker.getDataWatcher().d()) {
-                        entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityMetadata(this.tracker.getId(), this.tracker.getDataWatcher(), true));
+                        this.sendMetadata(this.tracker.getDataWatcher(), true, entityplayer); // CraftBukkit - custom metadata sender
                     }
 
                     if (this.tracker instanceof EntityLiving) {
@@ -388,8 +448,10 @@ public class EntityTrackerEntry {
 
                         while (iterator.hasNext()) {
                             MobEffect mobeffect = (MobEffect) iterator.next();
-
-                            entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityEffect(this.tracker.getId(), mobeffect));
+                            // CraftBukkit - account for ignorant effects
+                            if (!entityplayer.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(mobeffect.getEffectId()))) {
+                                entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityEffect(this.tracker.getId(), mobeffect));
+                            }
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
index a95877f..91ca60a 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
@@ -18,6 +18,13 @@ public class PacketPlayOutEntityMetadata extends Packet {
         }
     }
 
+    // CraftBukkit start - add constructor
+    public PacketPlayOutEntityMetadata(int i, List list) {
+        this.a = i;
+        this.b = list;
+    }
+    // CraftBukkit end
+
     public void a(PacketDataSerializer packetdataserializer) {
         this.a = packetdataserializer.readInt();
         this.b = DataWatcher.b(packetdataserializer);
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index b71bec4..e268441 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -125,7 +125,10 @@ public abstract class PlayerList {
         while (iterator.hasNext()) {
             MobEffect mobeffect = (MobEffect) iterator.next();
 
-            playerconnection.sendPacket(new PacketPlayOutEntityEffect(entityplayer.getId(), mobeffect));
+            // CraftBukkit - account for ignorant effects
+            if (!entityplayer.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(mobeffect.getEffectId()))) {
+                playerconnection.sendPacket(new PacketPlayOutEntityEffect(entityplayer.getId(), mobeffect));
+            }
         }
 
         entityplayer.syncInventory();
@@ -513,7 +516,10 @@ public abstract class PlayerList {
         while (iterator.hasNext()) {
             MobEffect mobeffect = (MobEffect) iterator.next();
 
-            entityplayer1.playerConnection.sendPacket(new PacketPlayOutEntityEffect(entityplayer1.getId(), mobeffect));
+            // CraftBukkit - account for ignorant effects
+            if (!entityplayer1.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(mobeffect.getEffectId()))) {
+                entityplayer1.playerConnection.sendPacket(new PacketPlayOutEntityEffect(entityplayer1.getId(), mobeffect));
+            }
         }
         // entityplayer1.syncInventory();
         // CraftBukkit end
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 60b0435..622e09f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -54,6 +54,7 @@ import org.bukkit.map.MapView;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
+import org.bukkit.potion.PotionEffectType;
 import org.bukkit.scoreboard.Scoreboard;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
@@ -64,6 +65,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
     private final Map<String, Player> hiddenPlayers = new MapMaker().softValues().makeMap();
+    private final Set<PotionEffectType> ignorantEffects = new HashSet<PotionEffectType>();
     private int hash = 0;
     private double health = 20;
     private boolean scaledHealth = false;
@@ -1252,4 +1254,43 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
         collection.add(new AttributeModifiable(getHandle().bc(), (new AttributeRanged("generic.maxHealth", scaledHealth ? healthScale : getMaxHealth(), 0.0D, Float.MAX_VALUE)).a("Max Health").a(true)));
     }
+
+    public Set<PotionEffectType> getIgnorantEffects() {
+        return ImmutableSet.copyOf(this.ignorantEffects);
+    }
+
+    public void clearIgnorantEffects() {
+        this.ignorantEffects.clear();
+
+        refreshTrackedMetadata();
+    }
+
+    public void addIgnorantEffect(PotionEffectType effect) {
+        Validate.notNull(effect, "Effect cannot be null");
+
+        this.ignorantEffects.add(effect);
+
+        refreshTrackedMetadata();
+    }
+
+    public void removeIgnorantEffect(PotionEffectType effect) {
+        Validate.notNull(effect, "Effect cannot be null");
+
+        this.ignorantEffects.remove(effect);
+
+        refreshTrackedMetadata();
+    }
+
+    public boolean hasIgnorantEffect(PotionEffectType effect) {
+        Validate.notNull(effect, "Effect cannot be null");
+
+        return this.ignorantEffects.contains(effect);
+    }
+
+    private void refreshTrackedMetadata() {
+        for(Object obj : this.getHandle().world.players) {
+            EntityPlayer player = (EntityPlayer) obj;
+            player.setInvisible(player.isInvisible());
+        }
+    }
 }
-- 
1.8.5.1


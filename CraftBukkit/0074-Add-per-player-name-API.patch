From 0fd3c941339dd0044e6eb3877227aa39a283900c Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sun, 19 Jan 2014 19:55:45 -0500
Subject: [PATCH] Add per-player name API


diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 4969a5c..8fcbef5 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -362,11 +362,16 @@ public class EntityTrackerEntry {
                     }
 
                     // entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.id));
-                    // CraftBukkit end
 
                     this.trackedPlayers.add(entityplayer);
                     Packet packet = this.c();
 
+                    if(packet instanceof Packet20NamedEntitySpawn) {
+                        ((Packet20NamedEntitySpawn) packet).b = ((Player)this.tracker.getBukkitEntity()).getOverheadName(entityplayer.getBukkitEntity());
+                    }
+
+                    // CraftBukkit end
+
                     entityplayer.playerConnection.sendPacket(packet);
                     if (!this.tracker.getDataWatcher().d()) {
                         this.sendMetadata(this.tracker.getDataWatcher(), true, entityplayer); // CraftBukkit - custom metadata sender
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index f798caa..f86ba3f 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -7,6 +7,7 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Random;
+import java.util.Set;
 import java.util.concurrent.Callable;
 
 import org.apache.commons.lang3.StringUtils;
@@ -19,6 +20,7 @@ import java.util.HashSet;
 
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.LazyHashSet;
 import org.bukkit.craftbukkit.util.LazyPlayerSet;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
@@ -892,6 +894,34 @@ public class PlayerConnection extends Connection {
         }
     }
 
+    private void chat(Player sender, Set<Player> recipients, String format, String text) {
+        String defaultName = sender.getDisplayName();
+        String defaultMessage = String.format(format, defaultName, text);
+
+        PlayerConnection.this.minecraftServer.console.sendMessage(text);
+
+        if (recipients instanceof LazyHashSet && ((LazyHashSet<Player>)recipients).isLazy()) {
+            for (Object player : PlayerConnection.this.minecraftServer.getPlayerList().players) {
+                Player recipient = ((EntityPlayer) player).getBukkitEntity();
+                String name = sender.getDisplayName(recipient);
+                if(defaultName.equals(name)) {
+                    recipient.sendMessage(defaultMessage);
+                } else {
+                    recipient.sendMessage(String.format(format, name, text));
+                }
+            }
+        } else {
+            for (Player recipient : recipients) {
+                String name = sender.getDisplayName(recipient);
+                if(defaultName.equals(name)) {
+                    recipient.sendMessage(defaultMessage);
+                } else {
+                    recipient.sendMessage(String.format(format, name, text));
+                }
+            }
+        }
+    }
+
     public void chat(String s, boolean async) {
         if (!this.player.dead) {
             if (s.length() == 0) {
@@ -924,18 +954,10 @@ public class PlayerConnection extends Connection {
                             if (queueEvent.isCancelled()) {
                                 return null;
                             }
-
-                            String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
-                            PlayerConnection.this.minecraftServer.console.sendMessage(message);
-                            if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
-                                for (Object player : PlayerConnection.this.minecraftServer.getPlayerList().players) {
-                                    ((EntityPlayer) player).sendMessage(ChatMessage.d(message));
-                                }
-                            } else {
-                                for (Player player : queueEvent.getRecipients()) {
-                                    player.sendMessage(message);
-                                }
-                            }
+                            PlayerConnection.this.chat(queueEvent.getPlayer(),
+                                                       queueEvent.getRecipients(),
+                                                       queueEvent.getFormat(),
+                                                       queueEvent.getMessage());
                             return null;
                         }};
                     if (async) {
@@ -955,17 +977,7 @@ public class PlayerConnection extends Connection {
                         return;
                     }
 
-                    s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
-                    minecraftServer.console.sendMessage(s);
-                    if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
-                        for (Object recipient : minecraftServer.getPlayerList().players) {
-                            ((EntityPlayer) recipient).sendMessage(ChatMessage.d(s));
-                        }
-                    } else {
-                        for (Player recipient : event.getRecipients()) {
-                            recipient.sendMessage(s);
-                        }
-                    }
+                    this.chat(event.getPlayer(), event.getRecipients(), event.getFormat(), event.getMessage());
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 3889157..e09ecf3 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -243,12 +243,11 @@ public abstract class PlayerList {
         // CraftBukkit end
 
         // CraftBukkit start - sendAll above replaced with this loop
-        Packet201PlayerInfo packet = new Packet201PlayerInfo(entityplayer.listName, true, 1000);
         for (int i = 0; i < this.players.size(); ++i) {
             EntityPlayer entityplayer1 = (EntityPlayer) this.players.get(i);
 
             if (entityplayer1.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
-                entityplayer1.playerConnection.sendPacket(packet);
+                entityplayer1.playerConnection.sendPacket(new Packet201PlayerInfo(entityplayer.getBukkitEntity().getPlayerListName(entityplayer1.getBukkitEntity()), true, 1000));
             }
         }
         // CraftBukkit end
@@ -258,7 +257,7 @@ public abstract class PlayerList {
 
             // CraftBukkit start - .name -> .listName
             if (entityplayer.getBukkitEntity().canSee(entityplayer1.getBukkitEntity())) {
-                entityplayer.playerConnection.sendPacket(new Packet201PlayerInfo(entityplayer1.listName, true, entityplayer1.ping));
+                entityplayer.playerConnection.sendPacket(new Packet201PlayerInfo(entityplayer1.getBukkitEntity().getPlayerListName(entityplayer.getBukkitEntity()), true, entityplayer1.ping));
             }
             // CraftBukkit end
         }
@@ -293,12 +292,11 @@ public abstract class PlayerList {
         ChunkIOExecutor.adjustPoolSize(this.getPlayerCount()); // CraftBukkit
 
         // CraftBukkit start - .name -> .listName, replace sendAll with loop
-        Packet201PlayerInfo packet = new Packet201PlayerInfo(entityplayer.listName, false, 9999);
         for (int i = 0; i < this.players.size(); ++i) {
             EntityPlayer entityplayer1 = (EntityPlayer) this.players.get(i);
 
             if (entityplayer1.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
-                entityplayer1.playerConnection.sendPacket(packet);
+                entityplayer1.playerConnection.sendPacket(new Packet201PlayerInfo(entityplayer.getBukkitEntity().getPlayerListName(entityplayer1.getBukkitEntity()), false, 9999));
             }
         }
         // This removes the scoreboard (and player reference) for the specific player in the manager
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 96d1ecf..a39196a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -15,9 +15,11 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
+import java.util.WeakHashMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import com.google.common.collect.Sets;
 import net.minecraft.server.*;
 
 import org.apache.commons.lang.Validate;
@@ -66,6 +68,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
     private final Map<UUID, Entity> hiddenEntities = new MapMaker().softValues().makeMap();
+    private final Map<Player, String> displayNames = new WeakHashMap<Player, String>();
+    private final Map<Player, String> playerListNames = new WeakHashMap<Player, String>();
+    private final Map<Player, String> overheadNames = new WeakHashMap<Player, String>();
     private final Set<PotionEffectType> ignorantEffects = new HashSet<PotionEffectType>();
     private int hash = 0;
     private double health = 20;
@@ -153,6 +158,121 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    @Override
+    public String getDisplayName(Player viewer) {
+        if(this.displayNames.containsKey(viewer)) {
+            return this.displayNames.get(viewer);
+        } else {
+            return this.getDisplayName();
+        }
+    }
+
+    @Override
+    public String getPlayerListName(Player viewer) {
+        if(this.playerListNames.containsKey(viewer)) {
+            return this.playerListNames.get(viewer);
+        } else {
+            return this.getPlayerListName();
+        }
+    }
+
+    @Override
+    public String getOverheadName(Player viewer) {
+        if(this.overheadNames.containsKey(viewer)) {
+            return this.overheadNames.get(viewer);
+        } else {
+            return this.getOverheadName();
+        }
+    }
+
+    @Override
+    public void setDisplayName(Player viewer, String name) {
+        if(name == null) {
+            this.displayNames.remove(viewer);
+        } else {
+            this.displayNames.put(viewer, name);
+        }
+    }
+
+    @Override
+    public void setPlayerListName(Player viewer, String name) {
+        String previousName;
+
+        if(name == null) {
+            previousName = this.playerListNames.remove(viewer);
+            if(previousName == null) {
+                return;
+            }
+            name = this.getPlayerListName();
+        } else {
+            previousName = this.playerListNames.get(viewer);
+            if(previousName == null) {
+                previousName = this.getPlayerListName();
+            } else if(name.equals(previousName)) {
+                return;
+            }
+
+            if (name.length() > 16) {
+                throw new IllegalArgumentException("Player list names can only be a maximum of 16 characters long");
+            }
+
+            for(Player conflict : this.getServer().getOnlinePlayers()) {
+                if(name.equals(conflict.getPlayerListName(viewer))) {
+                    throw new IllegalArgumentException(name + " is already used by another player");
+                }
+            }
+
+            this.playerListNames.put(viewer, name);
+        }
+
+        if(viewer.canSee(this)) {
+            EntityPlayer viewerEntity  = ((CraftPlayer)viewer).getHandle();
+            if(viewerEntity.playerConnection == null) {
+                return;
+            }
+
+            viewerEntity.playerConnection.sendPacket(new Packet201PlayerInfo(previousName, false, 9999));
+            viewerEntity.playerConnection.sendPacket(new Packet201PlayerInfo(name, true, getHandle().ping));
+        }
+    }
+
+    @Override
+    public void setOverheadName(Player viewer, String name) {
+        String previousName;
+
+        if(name == null) {
+            previousName = this.overheadNames.remove(viewer);
+            if(previousName == null) {
+                return;
+            }
+            name = this.getOverheadName();
+        } else {
+            previousName = this.overheadNames.get(viewer);
+            if(name.equals(previousName)) {
+                return;
+            }
+
+            if (name.length() > 16) {
+                throw new IllegalArgumentException("Overhead names can only be a maximum of 16 characters long");
+            }
+
+            this.overheadNames.put(viewer, name);
+        }
+
+        if(viewer.canSee(this)) {
+            EntityPlayer viewerEntity  = ((CraftPlayer)viewer).getHandle();
+            EntityTracker tracker = ((WorldServer) entity.world).tracker;
+            EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(getHandle().id);
+
+            if (getHandle().playerConnection == null || entry == null || viewerEntity.playerConnection == null) {
+                return;
+            }
+
+            entry.clear(viewerEntity);
+            entry.updatePlayer(viewerEntity);
+        }
+    }
+
     public String getDisplayName() {
         return getHandle().displayName;
     }
@@ -181,12 +301,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         // Collisions will make for invisible people
-        for (int i = 0; i < server.getHandle().players.size(); ++i) {
-            EntityPlayer player = (EntityPlayer) server.getHandle().players.get(i);
-            if (player.listName.equals(name) && getHandle() != player) {
-                // throw new IllegalArgumentException(name + " is already assigned as a player list name for someone"); - Try and fix instead of erroring out
-                server.getHandle().disconnect(player);
-                break;
+        for(Player viewer : this.server.getOnlinePlayers()) {
+            if(!this.playerListNames.containsKey(viewer)) {
+                for(Player conflict : this.server.getOnlinePlayers()) {
+                    if(name.equals(conflict.getPlayerListName(viewer))) {
+                        throw new IllegalArgumentException(name + " is already used by another player");
+                    }
+                }
             }
         }
 
@@ -199,7 +320,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             EntityPlayer entityplayer = (EntityPlayer) server.getHandle().players.get(i);
             if (entityplayer.playerConnection == null) continue;
 
-            if (entityplayer.getBukkitEntity().canSee(this)) {
+            if (entityplayer.getBukkitEntity().canSee(this) && !this.playerListNames.containsKey(entityplayer.getBukkitEntity())) {
                 entityplayer.playerConnection.sendPacket(oldpacket);
                 entityplayer.playerConnection.sendPacket(packet);
             }
@@ -720,7 +841,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         //remove the hidden player from this player user list
         if(other instanceof EntityPlayer) {
-            getHandle().playerConnection.sendPacket(new Packet201PlayerInfo(((CraftPlayer) entity).getPlayerListName(), false, 9999));
+            getHandle().playerConnection.sendPacket(new Packet201PlayerInfo(((CraftPlayer) entity).getPlayerListName(this), false, 9999));
         }
     }
 
@@ -743,7 +864,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         if(other instanceof EntityPlayer) {
-            getHandle().playerConnection.sendPacket(new Packet201PlayerInfo(((CraftPlayer) entity).getPlayerListName(), true, getHandle().ping));
+            getHandle().playerConnection.sendPacket(new Packet201PlayerInfo(((CraftPlayer) entity).getPlayerListName(this), true, getHandle().ping));
         }
     }
 
-- 
1.7.3.5

